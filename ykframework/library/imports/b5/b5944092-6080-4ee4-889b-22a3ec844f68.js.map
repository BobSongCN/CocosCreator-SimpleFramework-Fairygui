{"version":3,"sources":["assets\\YK\\core\\event\\EventDispatcher.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Event } from \"./Event\";\r\n\r\nexport class EventDispatcher {\r\n\r\n    private dicEventListener: Map<string, Array<EventBin>> = new Map<string, Array<EventBin>>();\r\n    private onceList: Array<EventBin> = new Array<EventBin>();\r\n\r\n    on(type: string, listener: Function, caller: any, priority?: number, once?: boolean): EventDispatcher {\r\n        let arr: Array<EventBin>;\r\n        if (this.hasEventListener(type)) {\r\n            arr = this.dicEventListener.get(type);\r\n        } else {\r\n            arr = new Array<EventBin>();\r\n            this.dicEventListener.set(type, arr);\r\n        }\r\n        this.insertEventBin(arr, type, listener, caller, priority, !!once);\r\n        return this;\r\n    }\r\n\r\n    once(type: string, listener: Function, caller: any, priority?: number): EventDispatcher {\r\n        this.on(type, listener, caller, priority, true);\r\n        return this;\r\n    }\r\n\r\n    off(type: string, listener: Function, caller: any): EventDispatcher {\r\n        this.removeListener(type, listener, caller);\r\n        return this;\r\n    }\r\n\r\n    offAll(type?: string): EventDispatcher {\r\n        if (!!type && this.hasEventListener(type)) {\r\n            this.dicEventListener.delete(type);\r\n        } else {\r\n            this.dicEventListener.clear();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    offAllCaller(caller: any): EventDispatcher {\r\n        let arr: Array<EventBin> = new Array<EventBin>();\r\n        this.dicEventListener.forEach(v => {\r\n            for (let i = 0; i < v.length; i++) {\r\n                let eventBin = v[i];\r\n                if (eventBin.thisObject == caller) {\r\n                    arr.push(eventBin);\r\n                }\r\n            }\r\n        });\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let e = arr[i];\r\n            this.removeListener(e.type, e.listener, e.thisObject);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    hasEventListener(type: string): boolean {\r\n        return this.dicEventListener.has(type);\r\n    }\r\n\r\n    dispatchEvent(ev: Event) {\r\n        ev.target = this;\r\n        this.notifyListener(ev);\r\n    }\r\n\r\n    dispatchEventWith(type: string, data?: any): boolean {\r\n        if (this.hasEventListener(type)) {\r\n            let event: Event = Event.create(Event, type);\r\n            event.data = data;\r\n            this.dispatchEvent(event);\r\n            Event.release(event);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private insertEventBin(list: any[], type: string, listener: Function, thisObject: any,\r\n        priority?: number, dispatchOnce?: boolean): boolean {\r\n        priority = +priority | 0;\r\n        let insertIndex = -1;\r\n        let length = list.length;\r\n        for (let i = 0; i < length; i++) {\r\n            let bin = list[i];\r\n            if (bin.listener == listener && bin.thisObject == thisObject && bin.target == this) {\r\n                return false;\r\n            }\r\n            if (insertIndex == -1 && bin.priority < priority) {\r\n                insertIndex = i;\r\n            }\r\n        }\r\n        let eventBin: EventBin = {\r\n            type: type, listener: listener, thisObject: thisObject, priority: priority,\r\n            target: this, dispatchOnce: !!dispatchOnce\r\n        };\r\n\r\n        if (insertIndex !== -1) {\r\n            list.splice(insertIndex, 0, eventBin);\r\n        } else {\r\n            list.push(eventBin);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private removeListener(type: string, listener: Function, caller: any) {\r\n        if (this.hasEventListener(type)) {\r\n            this.removeEventBin(this.dicEventListener.get(type), listener, caller);\r\n        }\r\n    }\r\n\r\n    private removeEventBin(list: any[], listener: Function, caller: any): boolean {\r\n        let length = list.length;\r\n        for (let i = 0; i < length; i++) {\r\n            let bin = list[i];\r\n            if (bin.listener == listener && bin.thisObject == caller && bin.target == this) {\r\n                list.splice(i, 1);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private notifyListener(event: Event) {\r\n        let list: Array<EventBin> = this.dicEventListener.get(event.type);\r\n        if (!list) {\r\n            return;\r\n        }\r\n        let length = list.length;\r\n        if (length == 0) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < length; i++) {\r\n            let eventBin = list[i];\r\n            eventBin.listener.call(eventBin.thisObject, event);\r\n\r\n            if (eventBin.dispatchOnce) {\r\n                this.onceList.push(eventBin);\r\n            }\r\n            if (event.isPropagationImmediateStopped) {\r\n                break;\r\n            }\r\n        }\r\n        while (this.onceList.length) {\r\n            let eventBin = this.onceList.pop();\r\n            eventBin.target.off(eventBin.type, eventBin.listener, eventBin.thisObject);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * 事件信息对象\r\n */\r\nexport interface EventBin {\r\n    type: string;\r\n    listener: Function;\r\n    thisObject: any;\r\n    priority: number;\r\n    target: EventDispatcher;\r\n    dispatchOnce: boolean;\r\n}\r\n"]}