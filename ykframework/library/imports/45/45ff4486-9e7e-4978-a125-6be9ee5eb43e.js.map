{"version":3,"sources":["assets\\YK\\core\\scene\\Scene.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { IState } from \"../statemechine/IState\";\r\nimport { ActionsExecutionMode, TaskList } from \"../task/TaskList\";\r\nimport { Task } from \"../task/Task\";\r\nimport StateMachine from \"../statemechine/StateMachine\";\r\nimport { TimeDelay } from \"../utils/TimeDelay\";\r\nimport { Func } from \"../utils/Listener\";\r\n\r\nclass SceneMgr {\r\n    private static mSceneStateMachine = new StateMachine();\r\n\r\n    public static get current() {\r\n        return this.mSceneStateMachine.curState == null ? null : this.mSceneStateMachine.curState as Scene;\r\n    }\r\n\r\n    public static go(sceneId: number, param: any = null) {\r\n        this.mSceneStateMachine.switchState(sceneId, param);\r\n    }\r\n\r\n    public static addScene(scene: Scene) {\r\n        this.mSceneStateMachine.registerState(scene);\r\n    }\r\n\r\n    public static removeScene(sceneId: number) {\r\n        this.mSceneStateMachine.removeState(sceneId);\r\n    }\r\n\r\n    public static init() {\r\n        TimeDelay.instance.addUpdate(this.onUpdate, this);\r\n    }\r\n\r\n    private static onUpdate() {\r\n        this.mSceneStateMachine.update();\r\n    }\r\n}\r\n\r\nexport abstract class Scene implements IState {\r\n\r\n    static init() {\r\n        SceneMgr.init();\r\n    }\r\n\r\n    static go(sceneId: number, param: any = null) {\r\n        SceneMgr.go(sceneId, param);\r\n    }\r\n\r\n    static add(scene: Scene) {\r\n        SceneMgr.addScene(scene);\r\n    }\r\n\r\n    static remove(sceneId: number) {\r\n        SceneMgr.removeScene(sceneId);\r\n    }\r\n\r\n    get stateId() {\r\n        return this.sceneId;\r\n    }\r\n\r\n    public abstract get sceneId(): number;\r\n\r\n    protected mSceneTask = new TaskList(ActionsExecutionMode.RunInParallel);\r\n\r\n    constructor() {\r\n        this.mSceneTask.setComplete(Func.create(() => {\r\n            this.onTaskFinish();\r\n            this.mSceneTask.actions.splice(0, this.mSceneTask.actions.length);\r\n        }, this));\r\n    }\r\n\r\n    onEnter(prevState: IState, param: any): void {\r\n        this.onSceneEnter(prevState as Scene, param);\r\n        this.mSceneTask.execute(this)\r\n    }\r\n\r\n    onExit(nextState: IState, param: any): void {\r\n        this.mSceneTask.reset();\r\n        this.mSceneTask.endAction(false);\r\n        this.onLeaveScene(nextState as Scene, param);\r\n    }\r\n\r\n    private mSequenceTask: TaskList = null;\r\n    private mParallelTask: TaskList = null;\r\n\r\n    public addSceneTask(task: Task, executionMode: ActionsExecutionMode = ActionsExecutionMode.RunInSequence): Scene {\r\n        if (executionMode == ActionsExecutionMode.RunInParallel) {\r\n            if (this.mParallelTask != null) {\r\n                this.mParallelTask.addTask(task);\r\n            } else {\r\n                this.mParallelTask = new TaskList(executionMode);\r\n                this.mParallelTask.addTask(task);\r\n                this.mParallelTask.addTask(this.mSequenceTask);\r\n            }\r\n        } else {\r\n            if (this.mSequenceTask != null) {\r\n                this.mSequenceTask.addTask(task);\r\n            } else {\r\n                this.mSequenceTask = new TaskList(executionMode);\r\n                this.mSequenceTask.addTask(task);\r\n                this.mSceneTask.addTask(this.mSequenceTask);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    onUpdate() {\r\n    }\r\n\r\n    protected onTaskFinish() {\r\n\r\n    }\r\n\r\n    protected onSceneEnter(prevState: Scene, param: any) {\r\n\r\n    }\r\n\r\n    protected onLeaveScene(nextState: Scene, param: any) {\r\n    }\r\n}"]}