{"version":3,"sources":["assets\\YK\\core\\event\\Event.ts"],"names":[],"mappings":";;;;;AAEA;IAeI,eAAmB,IAAY,EAAE,IAAU;QACvC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAZM,wCAAwB,GAA/B;QACI,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC;IAC9C,CAAC;IAES,qBAAK,GAAf;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,6BAA6B,GAAG,KAAK,CAAC;IAC/C,CAAC;IAOa,YAAM,GAApB,UAAsC,UAAyD,EAAE,IAAY;QACzG,IAAI,SAAkB,CAAC;QACvB,IAAI,YAAY,GAAI,UAAkB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QACnE,IAAI,YAAY,EAAE;YACd,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;SACpC;QAED,IAAI,CAAC,SAAS,EAAE;YACZ,SAAS,GAAG,UAAU,CAAC,SAAS,GAAG,EAAE,CAAC;SACzC;QACD,IAAI,SAAS,CAAC,MAAM,EAAE;YAClB,IAAI,KAAK,GAAS,SAAS,CAAC,GAAG,EAAE,CAAC;YAClC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;YAClB,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAEa,mBAAa,GAA3B,UAA4B,MAAuB,EAAE,IAAY,EAAE,IAAU;QACzE,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACtC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC5B,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAEa,aAAO,GAArB,UAAsB,KAAY;QAC9B,KAAK,CAAC,KAAK,EAAE,CAAC;QACd,IAAI,UAAU,GAAQ,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC;QAC/D,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEL,YAAC;AAAD,CAnDA,AAmDC,IAAA;AAnDY,sBAAK","file":"","sourceRoot":"/","sourcesContent":["import { EventDispatcher } from \"./EventDispatcher\";\r\n\r\nexport class Event {\r\n    public target: EventDispatcher;\r\n    public data: any;\r\n    public type: string;\r\n    public isPropagationImmediateStopped: boolean;\r\n\r\n    public stopImmediatePropagation(): void {\r\n        this.isPropagationImmediateStopped = true;\r\n    }\r\n\r\n    protected clean(): void {\r\n        this.data = this.target = null;\r\n        this.isPropagationImmediateStopped = false;\r\n    }\r\n\r\n    public constructor(type: string, data?: any) {\r\n        this.type = type;\r\n        this.data = data;\r\n    }\r\n\r\n    public static create<T extends Event>(EventClass: { new(type: string): T; eventPool?: Event[] }, type: string): T {\r\n        let eventPool: Event[];\r\n        let hasEventPool = (EventClass as any).hasOwnProperty(\"eventPool\");\r\n        if (hasEventPool) {\r\n            eventPool = EventClass.eventPool;\r\n        }\r\n\r\n        if (!eventPool) {\r\n            eventPool = EventClass.eventPool = [];\r\n        }\r\n        if (eventPool.length) {\r\n            let event: T = <T>eventPool.pop();\r\n            event.type = type;\r\n            return event;\r\n        }\r\n        return new EventClass(type);\r\n    }\r\n\r\n    public static dispatchEvent(target: EventDispatcher, type: string, data?: any) {\r\n        let event = Event.create(Event, type);\r\n        event.data = data;\r\n        target.dispatchEvent(event);\r\n        Event.release(event);\r\n    }\r\n\r\n    public static release(event: Event): void {\r\n        event.clean();\r\n        let EventClass: any = Object.getPrototypeOf(event).constructor;\r\n        EventClass.eventPool.push(event);\r\n    }\r\n\r\n}"]}