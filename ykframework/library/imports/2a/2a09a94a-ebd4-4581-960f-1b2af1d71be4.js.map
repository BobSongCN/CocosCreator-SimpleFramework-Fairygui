{"version":3,"sources":["assets\\YK\\example\\task\\TaskTest.ts"],"names":[],"mappings":";;;;;AAAA,6BAA+B;AAC/B;IAAsB,2BAAO;IAGzB,iBAAY,GAAW;QAAvB,YACI,iBAAO,SAEV;QADG,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;IACnB,CAAC;IAES,2BAAS,GAAnB;QAAA,iBAOC;QANG,iBAAM,SAAS,WAAE,CAAC;QAClB,UAAU;QACV,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE;YAC5B,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,EAAE,IAAI,CAAC,CAAC;QACT,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;IACL,cAAC;AAAD,CAhBA,AAgBC,CAhBqB,EAAE,CAAC,IAAI,GAgB5B;AACD;IAAA;IAoBA,CAAC;IAnBU,aAAI,GAAX;QACI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;QACvB,IAAI,QAAQ,GAAG,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;QACtE,IAAI,QAAQ,GAAG,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;QACtE,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;aACjC,OAAO,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;aAC7B,OAAO,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;aACjC,OAAO,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;aAC7B,OAAO,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAEnC,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,oBAAoB,CAAC,aAAa,CAAC;aAC5D,OAAO,CAAC,QAAQ,CAAC;aACjB,OAAO,CAAC,QAAQ,CAAC;aACjB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YAC1B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC;IACL,eAAC;AAAD,CApBA,AAoBC,IAAA;AApBY,4BAAQ","file":"","sourceRoot":"/","sourcesContent":["import * as YK from \"../../YK\";\r\nclass LogTask extends YK.Task {\r\n    private readonly log: string;\r\n\r\n    constructor(log: string) {\r\n        super();\r\n        this.log = log;\r\n    }\r\n\r\n    protected onExecute() {\r\n        super.onExecute();\r\n        //YK.Timer\r\n        YK.TimeDelay.instance.Add(1, 1, () => {\r\n            this.endAction(true);\r\n        }, this);\r\n        console.log(Date.now(), this.log);\r\n    }\r\n}\r\nexport class TaskTest {\r\n    static test() {\r\n        console.log(\"开始任务系统测试\")\r\n        let parallel = new YK.TaskList(YK.ActionsExecutionMode.RunInParallel);\r\n        let sequence = new YK.TaskList(YK.ActionsExecutionMode.RunInSequence);\r\n        sequence.addTask(new LogTask(\"顺序测试1\"))\r\n            .addTask(new LogTask(\"顺序测试2\"))\r\n            .addTask(new LogTask(\"顺序测试3\"));\r\n\r\n        parallel.addTask(new LogTask(\"并行测试1\"))\r\n            .addTask(new LogTask(\"并行测试2\"))\r\n            .addTask(new LogTask(\"并行测试3\"));\r\n\r\n        let task = new YK.TaskList(YK.ActionsExecutionMode.RunInParallel)\r\n            .addTask(sequence)\r\n            .addTask(parallel)\r\n            .execute(null, YK.Func.create(() => {\r\n                console.log(\"任务完成\");\r\n            }, this));\r\n    }\r\n}\r\n\r\n"]}