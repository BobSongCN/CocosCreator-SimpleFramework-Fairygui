{"version":3,"sources":["assets\\YK\\core\\task\\TaskList.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Status, Task } from \"./Task\"\r\n\r\nexport enum ActionsExecutionMode {\r\n    RunInSequence,\r\n    RunInParallel\r\n}\r\n\r\nexport class TaskList extends Task {\r\n    public actions = new Array<Task>()\r\n    public finished = new Array<number>()\r\n    public executionMode = ActionsExecutionMode.RunInSequence\r\n    private mCurIndex: number\r\n\r\n    public get progress() {\r\n        let cur = 0\r\n        for (let i = 0; i < this.actions.length; i++) {\r\n            cur += this.actions[i].progress\r\n        }\r\n        let v = cur / this.actions.length\r\n        v = isNaN(v) ? 0 : v\r\n        if (this.actions.length == 0) v = 1\r\n        return v\r\n    }\r\n\r\n    protected onExecute() {\r\n        this.mCurIndex = 0\r\n        this.finished.splice(0, this.finished.length)\r\n        this.mProgress = 0\r\n    }\r\n\r\n    protected onUpdate() {\r\n        super.onUpdate()\r\n        if (this.actions.length == 0) {\r\n            this.endAction()\r\n            return\r\n        }\r\n        switch (this.executionMode) {\r\n            case ActionsExecutionMode.RunInParallel:\r\n                this.checkParallelTask()\r\n                break\r\n            case ActionsExecutionMode.RunInSequence:\r\n                this.checkInSequenceTask()\r\n                break\r\n        }\r\n    }\r\n\r\n    private checkParallelTask() {\r\n        for (let i = 0; i < this.actions.length; i++) {\r\n            if (this.finished.findIndex(a => a == i) != -1)\r\n                continue\r\n            let status = this.actions[i].tick(this.mOwnerSystem)\r\n            if (status == Status.Failure) {\r\n                this.mErr = this.actions[i].errInfo\r\n                this.endAction(false)\r\n                if (this.actions[i].onFinish != null) this.actions[i].onFinish.run(true);\r\n                return\r\n            }\r\n\r\n            if (status == Status.Success) {\r\n                this.finished.push(i)\r\n                if (this.actions[i].onFinish != null) this.actions[i].onFinish.run(true)\r\n            }\r\n\r\n        }\r\n        if (this.finished.length == this.actions.length) this.endAction()\r\n    }\r\n\r\n    private checkInSequenceTask() {\r\n        for (let i = this.mCurIndex; i < this.actions.length; i++) {\r\n\r\n            let status = this.actions[i].tick(this.mOwnerSystem)\r\n\r\n            if (status == Status.Failure) {\r\n                this.endAction(false)\r\n                if (this.actions[i].onFinish != null) this.actions[i].onFinish.run(false)\r\n                return\r\n            }\r\n\r\n            if (status == Status.Running) {\r\n                this.mCurIndex = i\r\n                return\r\n            } else {\r\n                if (this.actions[i].onFinish != null) this.actions[i].onFinish.run(true)\r\n            }\r\n        }\r\n        this.endAction()\r\n    }\r\n\r\n    protected onReset() {\r\n        for (let i = 0; i < this.actions.length; i++) {\r\n            this.actions[i].reset()\r\n        }\r\n\r\n        this.mCurIndex = 0\r\n        this.finished.splice(0, this.finished.length)\r\n    }\r\n\r\n    public addTask(task: Task): TaskList {\r\n        this.actions.push(task)\r\n        return this\r\n    }\r\n\r\n    constructor(executionMode: ActionsExecutionMode) {\r\n        super()\r\n        this.executionMode = executionMode\r\n    }\r\n\r\n    public clear() {\r\n\r\n        this.reset()\r\n        this.onForcedStop()\r\n        this.actions.splice(0, this.actions.length)\r\n    }\r\n}"]}