{
  "__type__": "cc.TextAsset",
  "_name": "fairygui.d",
  "_objFlags": 0,
  "_native": "",
  "text": "declare namespace fgui {\r\n    class AsyncOperation {\r\n        callback: (obj: GObject) => void;\r\n        private _node;\r\n        createObject(pkgName: string, resName: string): void;\r\n        createObjectFromURL(url: string): void;\r\n        cancel(): void;\r\n        private internalCreateObject;\r\n        private completed;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class Controller extends cc.EventTarget {\r\n        private _selectedIndex;\r\n        private _previousIndex;\r\n        private _pageIds;\r\n        private _pageNames;\r\n        private _actions;\r\n        name: string;\r\n        parent: GComponent;\r\n        autoRadioGroupDepth: boolean;\r\n        changing: boolean;\r\n        private static _nextPageId;\r\n        constructor();\r\n        dispose(): void;\r\n        selectedIndex: number;\r\n        onChanged(callback: Function, target: any): void;\r\n        offChanged(callback: Function, target: any): void;\r\n        setSelectedIndex(value: number): void;\r\n        readonly previsousIndex: number;\r\n        selectedPage: string;\r\n        setSelectedPage(value: string): void;\r\n        readonly previousPage: string;\r\n        readonly pageCount: number;\r\n        getPageName(index: number): string;\r\n        addPage(name?: string): void;\r\n        addPageAt(name: string, index: number): void;\r\n        removePage(name: string): void;\r\n        removePageAt(index: number): void;\r\n        clearPages(): void;\r\n        hasPage(aName: string): boolean;\r\n        getPageIndexById(aId: string): number;\r\n        getPageIdByName(aName: string): string;\r\n        getPageNameById(aId: string): string;\r\n        getPageId(index: number): string;\r\n        selectedPageId: string;\r\n        oppositePageId: string;\r\n        readonly previousPageId: string;\r\n        runActions(): void;\r\n        setup(buffer: ByteBuffer): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class DragDropManager {\r\n        private _agent;\r\n        private _sourceData;\r\n        private static _inst;\r\n        static readonly inst: DragDropManager;\r\n        constructor();\r\n        readonly dragAgent: GObject;\r\n        readonly dragging: boolean;\r\n        startDrag(source: GObject, icon: string, sourceData?: any, touchId?: number): void;\r\n        cancel(): void;\r\n        private onDragEnd;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    enum ButtonMode {\r\n        Common = 0,\r\n        Check = 1,\r\n        Radio = 2\r\n    }\r\n    enum AutoSizeType {\r\n        None = 0,\r\n        Both = 1,\r\n        Height = 2,\r\n        Shrink = 3\r\n    }\r\n    enum AlignType {\r\n        Left = 0,\r\n        Center = 1,\r\n        Right = 2\r\n    }\r\n    enum VertAlignType {\r\n        Top = 0,\r\n        Middle = 1,\r\n        Bottom = 2\r\n    }\r\n    enum LoaderFillType {\r\n        None = 0,\r\n        Scale = 1,\r\n        ScaleMatchHeight = 2,\r\n        ScaleMatchWidth = 3,\r\n        ScaleFree = 4,\r\n        ScaleNoBorder = 5\r\n    }\r\n    enum ListLayoutType {\r\n        SingleColumn = 0,\r\n        SingleRow = 1,\r\n        FlowHorizontal = 2,\r\n        FlowVertical = 3,\r\n        Pagination = 4\r\n    }\r\n    enum ListSelectionMode {\r\n        Single = 0,\r\n        Multiple = 1,\r\n        Multiple_SingleClick = 2,\r\n        None = 3\r\n    }\r\n    enum OverflowType {\r\n        Visible = 0,\r\n        Hidden = 1,\r\n        Scroll = 2\r\n    }\r\n    enum PackageItemType {\r\n        Image = 0,\r\n        MovieClip = 1,\r\n        Sound = 2,\r\n        Component = 3,\r\n        Atlas = 4,\r\n        Font = 5,\r\n        Swf = 6,\r\n        Misc = 7,\r\n        Unknown = 8\r\n    }\r\n    enum ObjectType {\r\n        Image = 0,\r\n        MovieClip = 1,\r\n        Swf = 2,\r\n        Graph = 3,\r\n        Loader = 4,\r\n        Group = 5,\r\n        Text = 6,\r\n        RichText = 7,\r\n        InputText = 8,\r\n        Component = 9,\r\n        List = 10,\r\n        Label = 11,\r\n        Button = 12,\r\n        ComboBox = 13,\r\n        ProgressBar = 14,\r\n        Slider = 15,\r\n        ScrollBar = 16,\r\n        Tree = 17\r\n    }\r\n    enum ProgressTitleType {\r\n        Percent = 0,\r\n        ValueAndMax = 1,\r\n        Value = 2,\r\n        Max = 3\r\n    }\r\n    enum ScrollBarDisplayType {\r\n        Default = 0,\r\n        Visible = 1,\r\n        Auto = 2,\r\n        Hidden = 3\r\n    }\r\n    enum ScrollType {\r\n        Horizontal = 0,\r\n        Vertical = 1,\r\n        Both = 2\r\n    }\r\n    enum FlipType {\r\n        None = 0,\r\n        Horizontal = 1,\r\n        Vertical = 2,\r\n        Both = 3\r\n    }\r\n    enum ChildrenRenderOrder {\r\n        Ascent = 0,\r\n        Descent = 1,\r\n        Arch = 2\r\n    }\r\n    enum GroupLayoutType {\r\n        None = 0,\r\n        Horizontal = 1,\r\n        Vertical = 2\r\n    }\r\n    enum PopupDirection {\r\n        Auto = 0,\r\n        Up = 1,\r\n        Down = 2\r\n    }\r\n    enum RelationType {\r\n        Left_Left = 0,\r\n        Left_Center = 1,\r\n        Left_Right = 2,\r\n        Center_Center = 3,\r\n        Right_Left = 4,\r\n        Right_Center = 5,\r\n        Right_Right = 6,\r\n        Top_Top = 7,\r\n        Top_Middle = 8,\r\n        Top_Bottom = 9,\r\n        Middle_Middle = 10,\r\n        Bottom_Top = 11,\r\n        Bottom_Middle = 12,\r\n        Bottom_Bottom = 13,\r\n        Width = 14,\r\n        Height = 15,\r\n        LeftExt_Left = 16,\r\n        LeftExt_Right = 17,\r\n        RightExt_Left = 18,\r\n        RightExt_Right = 19,\r\n        TopExt_Top = 20,\r\n        TopExt_Bottom = 21,\r\n        BottomExt_Top = 22,\r\n        BottomExt_Bottom = 23,\r\n        Size = 24\r\n    }\r\n    enum GraphType {\r\n        PlaceHolder = 0,\r\n        Rect = 1,\r\n        Ellipse = 2\r\n    }\r\n    enum FillMethod {\r\n        None = 0,\r\n        Horizontal = 1,\r\n        Vertical = 2,\r\n        Radial90 = 3,\r\n        Radial180 = 4,\r\n        Radial360 = 5\r\n    }\r\n    enum FillOrigin {\r\n        Top = 0,\r\n        Bottom = 1,\r\n        Left = 2,\r\n        Right = 3\r\n    }\r\n    enum ObjectPropID {\r\n        Text = 0,\r\n        Icon = 1,\r\n        Color = 2,\r\n        OutlineColor = 3,\r\n        Playing = 4,\r\n        Frame = 5,\r\n        DeltaTime = 6,\r\n        TimeScale = 7,\r\n        FontSize = 8,\r\n        Selected = 9\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GObject {\r\n        data: any;\r\n        packageItem: PackageItem;\r\n        static draggingObject: GObject;\r\n        protected _x: number;\r\n        protected _y: number;\r\n        protected _alpha: number;\r\n        protected _visible: boolean;\r\n        protected _touchable: boolean;\r\n        protected _grayed: boolean;\r\n        protected _draggable: boolean;\r\n        protected _skewX: number;\r\n        protected _skewY: number;\r\n        protected _pivotAsAnchor: boolean;\r\n        protected _sortingOrder: number;\r\n        protected _internalVisible: boolean;\r\n        protected _handlingController: boolean;\r\n        protected _tooltips: string;\r\n        protected _blendMode: BlendMode;\r\n        protected _pixelSnapping: boolean;\r\n        protected _dragTesting: boolean;\r\n        protected _dragStartPoint: cc.Vec2;\r\n        protected _relations: Relations;\r\n        protected _group: GGroup;\r\n        protected _gears: GearBase[];\r\n        protected _node: cc.Node;\r\n        protected _dragBounds: cc.Rect;\r\n        sourceWidth: number;\r\n        sourceHeight: number;\r\n        initWidth: number;\r\n        initHeight: number;\r\n        minWidth: number;\r\n        minHeight: number;\r\n        maxWidth: number;\r\n        maxHeight: number;\r\n        _parent: GComponent;\r\n        _width: number;\r\n        _height: number;\r\n        _rawWidth: number;\r\n        _rawHeight: number;\r\n        _id: string;\r\n        _name: string;\r\n        _underConstruct: boolean;\r\n        _gearLocked: boolean;\r\n        _sizePercentInGroup: number;\r\n        _touchDisabled: boolean;\r\n        _partner: GObjectPartner;\r\n        _treeNode: GTreeNode;\r\n        static _defaultGroupIndex: number;\r\n        constructor();\r\n        readonly id: string;\r\n        name: string;\r\n        x: number;\r\n        y: number;\r\n        setPosition(xv: number, yv: number): void;\r\n        xMin: number;\r\n        yMin: number;\r\n        pixelSnapping: boolean;\r\n        center(restraint?: boolean): void;\r\n        width: number;\r\n        height: number;\r\n        setSize(wv: number, hv: number, ignorePivot?: boolean): void;\r\n        makeFullScreen(): void;\r\n        ensureSizeCorrect(): void;\r\n        readonly actualWidth: number;\r\n        readonly actualHeight: number;\r\n        scaleX: number;\r\n        scaleY: number;\r\n        setScale(sx: number, sy: number): void;\r\n        skewX: number;\r\n        skewY: number;\r\n        setSkew(xv: number, yv: number): void;\r\n        pivotX: number;\r\n        pivotY: number;\r\n        setPivot(xv: number, yv: number, asAnchor?: boolean): void;\r\n        readonly pivotAsAnchor: boolean;\r\n        touchable: boolean;\r\n        grayed: boolean;\r\n        enabled: boolean;\r\n        rotation: number;\r\n        alpha: number;\r\n        visible: boolean;\r\n        readonly _finalVisible: boolean;\r\n        readonly internalVisible3: boolean;\r\n        sortingOrder: number;\r\n        requestFocus(): void;\r\n        tooltips: string;\r\n        blendMode: BlendMode;\r\n        readonly onStage: boolean;\r\n        readonly resourceURL: string;\r\n        group: GGroup;\r\n        getGear(index: number): GearBase;\r\n        protected updateGear(index: number): void;\r\n        checkGearController(index: number, c: Controller): boolean;\r\n        updateGearFromRelations(index: number, dx: number, dy: number): void;\r\n        addDisplayLock(): number;\r\n        releaseDisplayLock(token: number): void;\r\n        private checkGearDisplay;\r\n        readonly gearXY: GearXY;\r\n        readonly gearSize: GearSize;\r\n        readonly gearLook: GearLook;\r\n        readonly relations: Relations;\r\n        addRelation(target: GObject, relationType: number, usePercent?: boolean): void;\r\n        removeRelation(target: GObject, relationType: number): void;\r\n        readonly node: cc.Node;\r\n        readonly parent: GComponent;\r\n        removeFromParent(): void;\r\n        findParent(): GObject;\r\n        readonly root: GRoot;\r\n        readonly asCom: GComponent;\r\n        readonly asButton: GButton;\r\n        readonly asLabel: GLabel;\r\n        readonly asProgress: GProgressBar;\r\n        readonly asTextField: GTextField;\r\n        readonly asRichTextField: GRichTextField;\r\n        readonly asTextInput: GTextInput;\r\n        readonly asLoader: GLoader;\r\n        readonly asList: GList;\r\n        readonly asTree: GTree;\r\n        readonly asGraph: GGraph;\r\n        readonly asGroup: GGroup;\r\n        readonly asSlider: GSlider;\r\n        readonly asComboBox: GComboBox;\r\n        readonly asImage: GImage;\r\n        readonly asMovieClip: GMovieClip;\r\n        static cast(obj: cc.Node): GObject;\r\n        text: string;\r\n        icon: string;\r\n        readonly treeNode: GTreeNode;\r\n        dispose(): void;\r\n        protected onEnable(): void;\r\n        protected onDisable(): void;\r\n        protected onUpdate(): void;\r\n        protected onDestroy(): void;\r\n        onClick(listener: Function, target?: any): void;\r\n        offClick(listener: Function, target?: any): void;\r\n        clearClick(): void;\r\n        hasClickListener(): boolean;\r\n        on(type: string, listener: Function, target?: any): void;\r\n        off(type: string, listener?: Function, target?: any): void;\r\n        draggable: boolean;\r\n        dragBounds: cc.Rect;\r\n        startDrag(touchId?: number): void;\r\n        stopDrag(): void;\r\n        readonly dragging: boolean;\r\n        localToGlobal(ax?: number, ay?: number, resultPoint?: cc.Vec2): cc.Vec2;\r\n        globalToLocal(ax?: number, ay?: number, resultPoint?: cc.Vec2): cc.Vec2;\r\n        localToGlobalRect(ax?: number, ay?: number, aw?: number, ah?: number, resultRect?: cc.Rect): cc.Rect;\r\n        globalToLocalRect(ax?: number, ay?: number, aw?: number, ah?: number, resultRect?: cc.Rect): cc.Rect;\r\n        handleControllerChanged(c: Controller): void;\r\n        protected handleAnchorChanged(): void;\r\n        handlePositionChanged(): void;\r\n        protected handleSizeChanged(): void;\r\n        protected handleGrayedChanged(): void;\r\n        handleVisibleChanged(): void;\r\n        hitTest(globalPt: cc.Vec2): GObject;\r\n        getProp(index: number): any;\r\n        setProp(index: number, value: any): void;\r\n        constructFromResource(): void;\r\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\r\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\r\n        private onRollOver;\r\n        private onRollOut;\r\n        private static sGlobalDragStart;\r\n        private static sGlobalRect;\r\n        private static sHelperPoint;\r\n        private static sDragHelperRect;\r\n        private static sUpdateInDragging;\r\n        private static sDragQuery;\r\n        private initDrag;\r\n        private dragBegin;\r\n        private dragEnd;\r\n        private onTouchBegin_0;\r\n        private onTouchMove_0;\r\n        private onTouchEnd_0;\r\n    }\r\n    class GObjectPartner extends cc.Component {\r\n        _emitDisplayEvents: boolean;\r\n        callLater(callback: Function, delay?: number): void;\r\n        onClickLink(evt: Event, text: string): void;\r\n        protected onEnable(): void;\r\n        protected onDisable(): void;\r\n        protected update(dt: any): void;\r\n        protected onDestroy(): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GComponent extends GObject {\r\n        hitArea: IHitTest;\r\n        private _sortingChildCount;\r\n        private _opaque;\r\n        private _applyingController;\r\n        private _rectMask;\r\n        private _maskContent;\r\n        protected _margin: Margin;\r\n        protected _trackBounds: boolean;\r\n        protected _boundsChanged: boolean;\r\n        protected _childrenRenderOrder: ChildrenRenderOrder;\r\n        protected _apexIndex: number;\r\n        _buildingDisplayList: boolean;\r\n        _children: Array<GObject>;\r\n        _controllers: Array<Controller>;\r\n        _transitions: Array<Transition>;\r\n        _container: cc.Node;\r\n        _scrollPane: ScrollPane;\r\n        _alignOffset: cc.Vec2;\r\n        _customMask: cc.Mask;\r\n        constructor();\r\n        dispose(): void;\r\n        readonly displayListContainer: cc.Node;\r\n        addChild(child: GObject): GObject;\r\n        addChildAt(child: GObject, index: number): GObject;\r\n        private getInsertPosForSortingChild;\r\n        removeChild(child: GObject, dispose?: boolean): GObject;\r\n        removeChildAt(index: number, dispose?: boolean): GObject;\r\n        removeChildren(beginIndex?: number, endIndex?: number, dispose?: boolean): void;\r\n        getChildAt(index: number): GObject;\r\n        getChild(name: string): GObject;\r\n        getChildByPath(path: String): GObject;\r\n        getVisibleChild(name: string): GObject;\r\n        getChildInGroup(name: string, group: GGroup): GObject;\r\n        getChildById(id: string): GObject;\r\n        getChildIndex(child: GObject): number;\r\n        setChildIndex(child: GObject, index: number): void;\r\n        setChildIndexBefore(child: GObject, index: number): number;\r\n        private _setChildIndex;\r\n        swapChildren(child1: GObject, child2: GObject): void;\r\n        swapChildrenAt(index1: number, index2: number): void;\r\n        readonly numChildren: number;\r\n        isAncestorOf(child: GObject): boolean;\r\n        addController(controller: Controller): void;\r\n        getControllerAt(index: number): Controller;\r\n        getController(name: string): Controller;\r\n        removeController(c: Controller): void;\r\n        readonly controllers: Array<Controller>;\r\n        private onChildAdd;\r\n        private buildNativeDisplayList;\r\n        applyController(c: Controller): void;\r\n        applyAllControllers(): void;\r\n        adjustRadioGroupDepth(obj: GObject, c: Controller): void;\r\n        getTransitionAt(index: number): Transition;\r\n        getTransition(transName: string): Transition;\r\n        isChildInView(child: GObject): boolean;\r\n        getFirstChildInView(): number;\r\n        readonly scrollPane: ScrollPane;\r\n        opaque: boolean;\r\n        margin: Margin;\r\n        childrenRenderOrder: ChildrenRenderOrder;\r\n        apexIndex: number;\r\n        mask: GObject;\r\n        setMask(value: GObject, inverted: boolean): void;\r\n        private onMaskReady;\r\n        private onMaskContentChanged;\r\n        readonly _pivotCorrectX: number;\r\n        readonly _pivotCorrectY: number;\r\n        readonly baseUserData: string;\r\n        protected setupScroll(buffer: ByteBuffer): void;\r\n        protected setupOverflow(overflow: OverflowType): void;\r\n        protected handleAnchorChanged(): void;\r\n        protected handleSizeChanged(): void;\r\n        protected handleGrayedChanged(): void;\r\n        handleControllerChanged(c: Controller): void;\r\n        hitTest(globalPt: cc.Vec2): GObject;\r\n        setBoundsChangedFlag(): void;\r\n        private refresh;\r\n        ensureBoundsCorrect(): void;\r\n        protected updateBounds(): void;\r\n        setBounds(ax: number, ay: number, aw: number, ah?: number): void;\r\n        viewWidth: number;\r\n        viewHeight: number;\r\n        getSnappingPosition(xValue: number, yValue: number, resultPoint?: cc.Vec2): cc.Vec2;\r\n        childSortingOrderChanged(child: GObject, oldValue: number, newValue?: number): void;\r\n        constructFromResource(): void;\r\n        constructFromResource2(objectPool: Array<GObject>, poolIndex: number): void;\r\n        protected constructExtension(buffer: ByteBuffer): void;\r\n        protected onConstruct(): void;\r\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\r\n        protected onEnable(): void;\r\n        protected onDisable(): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GButton extends GComponent {\r\n        protected _titleObject: GObject;\r\n        protected _iconObject: GObject;\r\n        private _mode;\r\n        private _selected;\r\n        private _title;\r\n        private _selectedTitle;\r\n        private _icon;\r\n        private _selectedIcon;\r\n        private _sound;\r\n        private _soundVolumeScale;\r\n        private _buttonController;\r\n        private _relatedController;\r\n        private _relatedPageId;\r\n        private _changeStateOnClick;\r\n        private _linkedPopup;\r\n        private _downEffect;\r\n        private _downEffectValue;\r\n        private _downColor;\r\n        private _downScaled;\r\n        private _down;\r\n        private _over;\r\n        static UP: string;\r\n        static DOWN: string;\r\n        static OVER: string;\r\n        static SELECTED_OVER: string;\r\n        static DISABLED: string;\r\n        static SELECTED_DISABLED: string;\r\n        constructor();\r\n        icon: string;\r\n        selectedIcon: string;\r\n        title: string;\r\n        text: string;\r\n        selectedTitle: string;\r\n        titleColor: cc.Color;\r\n        titleFontSize: number;\r\n        sound: string;\r\n        soundVolumeScale: number;\r\n        selected: boolean;\r\n        mode: ButtonMode;\r\n        relatedController: Controller;\r\n        relatedPageId: string;\r\n        changeStateOnClick: boolean;\r\n        linkedPopup: GObject;\r\n        getTextField(): GTextField;\r\n        fireClick(): void;\r\n        protected setState(val: string): void;\r\n        protected setCurrentState(): void;\r\n        handleControllerChanged(c: Controller): void;\r\n        protected handleGrayedChanged(): void;\r\n        getProp(index: number): any;\r\n        setProp(index: number, value: any): void;\r\n        protected constructExtension(buffer: ByteBuffer): void;\r\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\r\n        private onRollOver_1;\r\n        private onRollOut_1;\r\n        private onTouchBegin_1;\r\n        private onTouchEnd_1;\r\n        private onClick_1;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GComboBox extends GComponent {\r\n        dropdown: GComponent;\r\n        protected _titleObject: GObject;\r\n        protected _iconObject: GObject;\r\n        protected _list: GList;\r\n        private _items;\r\n        private _values;\r\n        private _icons;\r\n        private _visibleItemCount;\r\n        private _itemsUpdated;\r\n        private _selectedIndex;\r\n        private _buttonController;\r\n        private _popupDirection;\r\n        private _selectionController;\r\n        private _over;\r\n        private _down;\r\n        constructor();\r\n        text: string;\r\n        icon: string;\r\n        titleColor: cc.Color;\r\n        titleFontSize: number;\r\n        visibleItemCount: number;\r\n        popupDirection: PopupDirection;\r\n        items: Array<string>;\r\n        icons: Array<string>;\r\n        values: Array<string>;\r\n        selectedIndex: number;\r\n        value: string;\r\n        selectionController: Controller;\r\n        getTextField(): GTextField;\r\n        protected setState(val: string): void;\r\n        getProp(index: number): any;\r\n        setProp(index: number, value: any): void;\r\n        protected constructExtension(buffer: ByteBuffer): void;\r\n        handleControllerChanged(c: Controller): void;\r\n        private updateSelectionController;\r\n        dispose(): void;\r\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\r\n        protected showDropdown(): void;\r\n        private onPopupClosed;\r\n        private onClickItem;\r\n        private onClickItem2;\r\n        private onRollOver_1;\r\n        private onRollOut_1;\r\n        private onTouchBegin_1;\r\n        private onTouchEnd_1;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GGraph extends GObject {\r\n        _content: cc.Graphics;\r\n        private _type;\r\n        private _lineSize;\r\n        private _lineColor;\r\n        private _fillColor;\r\n        private _cornerRadius;\r\n        private _sides;\r\n        private _startAngle;\r\n        private _polygonPoints;\r\n        private _distances;\r\n        private _hasContent;\r\n        constructor();\r\n        drawRect(lineSize: number, lineColor: cc.Color, fillColor: cc.Color, corner?: Array<number>): void;\r\n        drawEllipse(lineSize: number, lineColor: cc.Color, fillColor: cc.Color): void;\r\n        drawRegularPolygon(lineSize: number, lineColor: cc.Color, fillColor: cc.Color, sides: number, startAngle?: number, distances?: number[]): void;\r\n        drawPolygon(lineSize: number, lineColor: cc.Color, fillColor: cc.Color, points: any[]): void;\r\n        distances: number[];\r\n        clearGraphics(): void;\r\n        readonly type: GraphType;\r\n        color: cc.Color;\r\n        private updateGraph;\r\n        private drawPath;\r\n        protected handleSizeChanged(): void;\r\n        protected handleAnchorChanged(): void;\r\n        getProp(index: number): any;\r\n        setProp(index: number, value: any): void;\r\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GGroup extends GObject {\r\n        private _layout;\r\n        private _lineGap;\r\n        private _columnGap;\r\n        private _excludeInvisibles;\r\n        private _autoSizeDisabled;\r\n        private _mainGridIndex;\r\n        private _mainGridMinSize;\r\n        private _boundsChanged;\r\n        private _percentReady;\r\n        private _mainChildIndex;\r\n        private _totalSize;\r\n        private _numChildren;\r\n        _updating: number;\r\n        constructor();\r\n        dispose(): void;\r\n        layout: number;\r\n        lineGap: number;\r\n        columnGap: number;\r\n        excludeInvisibles: boolean;\r\n        autoSizeDisabled: boolean;\r\n        mainGridMinSize: number;\r\n        mainGridIndex: number;\r\n        setBoundsChangedFlag(positionChangedOnly?: boolean): void;\r\n        private _ensureBoundsCorrect;\r\n        ensureSizeCorrect(): void;\r\n        ensureBoundsCorrect(): void;\r\n        private updateBounds;\r\n        private handleLayout;\r\n        moveChildren(dx: number, dy: number): void;\r\n        resizeChildren(dw: number, dh: number): void;\r\n        handleAlphaChanged(): void;\r\n        handleVisibleChanged(): void;\r\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\r\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GImage extends GObject {\r\n        _content: Image;\r\n        constructor();\r\n        color: cc.Color;\r\n        flip: FlipType;\r\n        fillMethod: FillMethod;\r\n        fillOrigin: FillOrigin;\r\n        fillClockwise: boolean;\r\n        fillAmount: number;\r\n        constructFromResource(): void;\r\n        protected handleGrayedChanged(): void;\r\n        getProp(index: number): any;\r\n        setProp(index: number, value: any): void;\r\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GLabel extends GComponent {\r\n        protected _titleObject: GObject;\r\n        protected _iconObject: GObject;\r\n        constructor();\r\n        icon: string;\r\n        title: string;\r\n        text: string;\r\n        titleColor: cc.Color;\r\n        titleFontSize: number;\r\n        editable: boolean;\r\n        getTextField(): GTextField;\r\n        getProp(index: number): any;\r\n        setProp(index: number, value: any): void;\r\n        protected constructExtension(buffer: ByteBuffer): void;\r\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GList extends GComponent {\r\n        itemRenderer: (index: number, item: GObject) => void;\r\n        itemProvider: (index: number) => string;\r\n        scrollItemToViewOnClick: boolean;\r\n        foldInvisibleItems: boolean;\r\n        private _layout;\r\n        private _lineCount;\r\n        private _columnCount;\r\n        private _lineGap;\r\n        private _columnGap;\r\n        private _defaultItem;\r\n        private _autoResizeItem;\r\n        private _selectionMode;\r\n        private _align;\r\n        private _verticalAlign;\r\n        private _selectionController;\r\n        private _lastSelectedIndex;\r\n        private _pool;\r\n        private _virtual;\r\n        private _loop;\r\n        private _numItems;\r\n        private _realNumItems;\r\n        private _firstIndex;\r\n        private _curLineItemCount;\r\n        private _curLineItemCount2;\r\n        private _itemSize;\r\n        private _virtualListChanged;\r\n        private _virtualItems;\r\n        private _eventLocked;\r\n        private itemInfoVer;\r\n        constructor();\r\n        dispose(): void;\r\n        layout: ListLayoutType;\r\n        lineCount: number;\r\n        columnCount: number;\r\n        lineGap: number;\r\n        columnGap: number;\r\n        align: AlignType;\r\n        verticalAlign: VertAlignType;\r\n        virtualItemSize: cc.Size;\r\n        defaultItem: string;\r\n        autoResizeItem: boolean;\r\n        selectionMode: ListSelectionMode;\r\n        selectionController: Controller;\r\n        readonly itemPool: GObjectPool;\r\n        getFromPool(url?: string): GObject;\r\n        returnToPool(obj: GObject): void;\r\n        addChildAt(child: GObject, index?: number): GObject;\r\n        addItem(url?: string): GObject;\r\n        addItemFromPool(url?: string): GObject;\r\n        removeChildAt(index: number, dispose?: boolean): GObject;\r\n        removeChildToPoolAt(index: number): void;\r\n        removeChildToPool(child: GObject): void;\r\n        removeChildrenToPool(beginIndex?: number, endIndex?: number): void;\r\n        selectedIndex: number;\r\n        getSelection(result?: number[]): number[];\r\n        addSelection(index: number, scrollItToView?: boolean): void;\r\n        removeSelection(index: number): void;\r\n        clearSelection(): void;\r\n        private clearSelectionExcept;\r\n        selectAll(): void;\r\n        selectNone(): void;\r\n        selectReverse(): void;\r\n        handleArrowKey(dir: number): void;\r\n        private onClickItem;\r\n        protected dispatchItemEvent(item: GObject, evt: Event): void;\r\n        private setSelectionOnEvent;\r\n        resizeToFit(itemCount?: number, minSize?: number): void;\r\n        getMaxItemWidth(): number;\r\n        protected handleSizeChanged(): void;\r\n        handleControllerChanged(c: Controller): void;\r\n        private updateSelectionController;\r\n        getSnappingPosition(xValue: number, yValue: number, resultPoint?: cc.Vec2): cc.Vec2;\r\n        scrollToView(index: number, ani?: boolean, setFirst?: boolean): void;\r\n        getFirstChildInView(): number;\r\n        childIndexToItemIndex(index: number): number;\r\n        itemIndexToChildIndex(index: number): number;\r\n        setVirtual(): void;\r\n        setVirtualAndLoop(): void;\r\n        private _setVirtual;\r\n        numItems: number;\r\n        refreshVirtualList(): void;\r\n        private checkVirtualList;\r\n        private setVirtualListChangedFlag;\r\n        private _refreshVirtualList;\r\n        private __scrolled;\r\n        private getIndexOnPos1;\r\n        private getIndexOnPos2;\r\n        private getIndexOnPos3;\r\n        private handleScroll;\r\n        private static pos_param;\r\n        private handleScroll1;\r\n        private handleScroll2;\r\n        private handleScroll3;\r\n        private handleArchOrder1;\r\n        private handleArchOrder2;\r\n        private handleAlign;\r\n        protected updateBounds(): void;\r\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\r\n        protected readItems(buffer: ByteBuffer): void;\r\n        protected setupItem(buffer: ByteBuffer, obj: GObject): void;\r\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GObjectPool {\r\n        private _pool;\r\n        private _count;\r\n        constructor();\r\n        clear(): void;\r\n        readonly count: number;\r\n        getObject(url: string): GObject;\r\n        returnObject(obj: GObject): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GLoader extends GObject {\r\n        _content: MovieClip;\r\n        private _url;\r\n        private _align;\r\n        private _verticalAlign;\r\n        private _autoSize;\r\n        private _fill;\r\n        private _shrinkOnly;\r\n        private _showErrorSign;\r\n        private _playing;\r\n        private _frame;\r\n        private _color;\r\n        private _contentItem;\r\n        private _contentSourceWidth;\r\n        private _contentSourceHeight;\r\n        private _contentWidth;\r\n        private _contentHeight;\r\n        private _container;\r\n        private _errorSign;\r\n        private _content2;\r\n        private _updatingLayout;\r\n        private static _errorSignPool;\r\n        constructor();\r\n        dispose(): void;\r\n        url: string;\r\n        icon: string;\r\n        align: AlignType;\r\n        verticalAlign: VertAlignType;\r\n        fill: LoaderFillType;\r\n        shrinkOnly: boolean;\r\n        autoSize: boolean;\r\n        playing: boolean;\r\n        frame: number;\r\n        color: cc.Color;\r\n        fillMethod: FillMethod;\r\n        fillOrigin: FillOrigin;\r\n        fillClockwise: boolean;\r\n        fillAmount: number;\r\n        showErrorSign: boolean;\r\n        readonly component: GComponent;\r\n        texture: cc.SpriteFrame;\r\n        protected loadContent(): void;\r\n        protected loadFromPackage(itemURL: string): void;\r\n        protected loadExternal(): void;\r\n        private onLoaded;\r\n        protected freeExternal(texture: cc.SpriteFrame): void;\r\n        protected onExternalLoadSuccess(texture: cc.SpriteFrame): void;\r\n        protected onExternalLoadFailed(): void;\r\n        private setErrorState;\r\n        private clearErrorState;\r\n        private updateLayout;\r\n        private clearContent;\r\n        protected handleSizeChanged(): void;\r\n        protected handleAnchorChanged(): void;\r\n        protected handleGrayedChanged(): void;\r\n        hitTest(globalPt: cc.Vec2): GObject;\r\n        getProp(index: number): any;\r\n        setProp(index: number, value: any): void;\r\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GMovieClip extends GObject {\r\n        _content: MovieClip;\r\n        constructor();\r\n        color: cc.Color;\r\n        playing: boolean;\r\n        frame: number;\r\n        timeScale: number;\r\n        rewind(): void;\r\n        syncStatus(anotherMc: GMovieClip): void;\r\n        advance(timeInMiniseconds: number): void;\r\n        setPlaySettings(start?: number, end?: number, times?: number, endAt?: number, endCallback?: Function, callbackObj?: any): void;\r\n        protected handleGrayedChanged(): void;\r\n        getProp(index: number): any;\r\n        setProp(index: number, value: any): void;\r\n        constructFromResource(): void;\r\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GProgressBar extends GComponent {\r\n        private _min;\r\n        private _max;\r\n        private _value;\r\n        private _titleType;\r\n        private _reverse;\r\n        private _titleObject;\r\n        private _aniObject;\r\n        private _barObjectH;\r\n        private _barObjectV;\r\n        private _barMaxWidth;\r\n        private _barMaxHeight;\r\n        private _barMaxWidthDelta;\r\n        private _barMaxHeightDelta;\r\n        private _barStartX;\r\n        private _barStartY;\r\n        constructor();\r\n        titleType: ProgressTitleType;\r\n        min: number;\r\n        max: number;\r\n        value: number;\r\n        tweenValue(value: number, duration: number): GTweener;\r\n        update(newValue: number): void;\r\n        protected constructExtension(buffer: ByteBuffer): void;\r\n        protected handleSizeChanged(): void;\r\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GTextField extends GObject {\r\n        _label: cc.Label;\r\n        protected _font: string;\r\n        protected _realFont: string | cc.Font;\r\n        protected _fontSize: number;\r\n        protected _color: cc.Color;\r\n        protected _strokeColor: cc.Color;\r\n        protected _leading: number;\r\n        protected _text: string;\r\n        protected _ubbEnabled: boolean;\r\n        protected _templateVars: any;\r\n        protected _autoSize: AutoSizeType;\r\n        protected _updatingSize: boolean;\r\n        protected _sizeDirty: boolean;\r\n        protected _outline: cc.LabelOutline;\r\n        constructor();\r\n        protected createRenderer(): void;\r\n        text: string;\r\n        font: string;\r\n        fontSize: number;\r\n        color: cc.Color;\r\n        align: cc.Label.HorizontalAlign;\r\n        verticalAlign: cc.Label.VerticalAlign;\r\n        leading: number;\r\n        letterSpacing: number;\r\n        underline: boolean;\r\n        bold: boolean;\r\n        italic: boolean;\r\n        singleLine: boolean;\r\n        stroke: number;\r\n        strokeColor: cc.Color;\r\n        ubbEnabled: boolean;\r\n        autoSize: AutoSizeType;\r\n        protected parseTemplate(template: string): string;\r\n        templateVars: any;\r\n        setVar(name: string, value: string): GTextField;\r\n        flushVars(): void;\r\n        readonly textWidth: number;\r\n        ensureSizeCorrect(): void;\r\n        protected updateText(): void;\r\n        protected assignFont(label: any, value: string | cc.Font): void;\r\n        protected assignFontColor(label: any, value: cc.Color): void;\r\n        protected updateFont(): void;\r\n        protected updateFontColor(): void;\r\n        protected updateStrokeColor(): void;\r\n        protected updateFontSize(): void;\r\n        protected updateOverflow(): void;\r\n        protected markSizeChanged(): void;\r\n        protected onLabelSizeChanged(): void;\r\n        protected handleSizeChanged(): void;\r\n        protected handleGrayedChanged(): void;\r\n        getProp(index: number): any;\r\n        setProp(index: number, value: any): void;\r\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\r\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class RichTextImageAtlas extends cc.SpriteAtlas {\r\n        getSpriteFrame(key: string): cc.SpriteFrame;\r\n    }\r\n    class GRichTextField extends GTextField {\r\n        _richText: cc.RichText;\r\n        private _bold;\r\n        private _italics;\r\n        private _underline;\r\n        linkUnderline: boolean;\r\n        linkColor: string;\r\n        static imageAtlas: RichTextImageAtlas;\r\n        constructor();\r\n        protected createRenderer(): void;\r\n        align: cc.Label.HorizontalAlign;\r\n        verticalAlign: cc.Label.VerticalAlign;\r\n        letterSpacing: number;\r\n        underline: boolean;\r\n        bold: boolean;\r\n        italic: boolean;\r\n        singleLine: boolean;\r\n        protected markSizeChanged(): void;\r\n        protected updateText(): void;\r\n        protected updateFont(): void;\r\n        protected updateFontColor(): void;\r\n        protected updateFontSize(): void;\r\n        protected updateOverflow(): void;\r\n        protected handleSizeChanged(): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GRoot extends GComponent {\r\n        static contentScaleLevel: number;\r\n        private _modalLayer;\r\n        private _popupStack;\r\n        private _justClosedPopups;\r\n        private _modalWaitPane;\r\n        private _tooltipWin;\r\n        private _defaultTooltipWin;\r\n        private _volumeScale;\r\n        private _inputProcessor;\r\n        private _thisOnResized;\r\n        private static _inst;\r\n        static readonly inst: GRoot;\r\n        static create(): GRoot;\r\n        constructor();\r\n        protected onDestroy(): void;\r\n        getTouchPosition(touchId?: number): cc.Vec2;\r\n        readonly touchTarget: GObject;\r\n        readonly inputProcessor: InputProcessor;\r\n        showWindow(win: Window): void;\r\n        hideWindow(win: Window): void;\r\n        hideWindowImmediately(win: Window): void;\r\n        bringToFront(win: Window): void;\r\n        showModalWait(msg?: string): void;\r\n        closeModalWait(): void;\r\n        closeAllExceptModals(): void;\r\n        closeAllWindows(): void;\r\n        getTopWindow(): Window;\r\n        readonly modalLayer: GGraph;\r\n        readonly hasModalWindow: boolean;\r\n        readonly modalWaiting: boolean;\r\n        getPopupPosition(popup: GObject, target?: GObject, downward?: any, result?: cc.Vec2): cc.Vec2;\r\n        showPopup(popup: GObject, target?: GObject, downward?: any): void;\r\n        togglePopup(popup: GObject, target?: GObject, downward?: any): void;\r\n        hidePopup(popup?: GObject): void;\r\n        readonly hasAnyPopup: boolean;\r\n        private closePopup;\r\n        showTooltips(msg: string): void;\r\n        showTooltipsWin(tooltipWin: GObject): void;\r\n        hideTooltips(): void;\r\n        volumeScale: number;\r\n        playOneShotSound(clip: cc.AudioClip, volumeScale?: number): void;\r\n        private adjustModalLayer;\r\n        private onTouchBegin_1;\r\n        private onWinResize;\r\n        handlePositionChanged(): void;\r\n        private updateContentScaleLevel;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GScrollBar extends GComponent {\r\n        private _grip;\r\n        private _arrowButton1;\r\n        private _arrowButton2;\r\n        private _bar;\r\n        private _target;\r\n        private _vertical;\r\n        private _scrollPerc;\r\n        private _fixedGripSize;\r\n        private _dragOffset;\r\n        private _gripDragging;\r\n        constructor();\r\n        setScrollPane(target: ScrollPane, vertical: boolean): void;\r\n        setDisplayPerc(value: number): void;\r\n        setScrollPerc(val: number): void;\r\n        readonly minSize: number;\r\n        readonly gripDragging: boolean;\r\n        protected constructExtension(buffer: ByteBuffer): void;\r\n        private onGripTouchDown;\r\n        private static sScrollbarHelperPoint;\r\n        private onGripTouchMove;\r\n        private onGripTouchEnd;\r\n        private onClickArrow1;\r\n        private onClickArrow2;\r\n        private onBarTouchBegin;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GSlider extends GComponent {\r\n        private _min;\r\n        private _max;\r\n        private _value;\r\n        private _titleType;\r\n        private _reverse;\r\n        private _wholeNumbers;\r\n        private _titleObject;\r\n        private _barObjectH;\r\n        private _barObjectV;\r\n        private _barMaxWidth;\r\n        private _barMaxHeight;\r\n        private _barMaxWidthDelta;\r\n        private _barMaxHeightDelta;\r\n        private _gripObject;\r\n        private _clickPos;\r\n        private _clickPercent;\r\n        private _barStartX;\r\n        private _barStartY;\r\n        changeOnClick: boolean;\r\n        canDrag: boolean;\r\n        constructor();\r\n        titleType: ProgressTitleType;\r\n        wholeNumbers: boolean;\r\n        min: number;\r\n        max: number;\r\n        value: number;\r\n        update(): void;\r\n        private updateWithPercent;\r\n        protected constructExtension(buffer: ByteBuffer): void;\r\n        protected handleSizeChanged(): void;\r\n        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;\r\n        private onGripTouchBegin;\r\n        private static sSilderHelperPoint;\r\n        private onGripTouchMove;\r\n        private onBarTouchBegin;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GTextInput extends GTextField {\r\n        _editBox: cc.EditBox;\r\n        private _promptText;\r\n        constructor();\r\n        protected createRenderer(): void;\r\n        editable: boolean;\r\n        maxLength: number;\r\n        promptText: string;\r\n        restrict: string;\r\n        password: boolean;\r\n        align: cc.Label.HorizontalAlign;\r\n        verticalAlign: cc.Label.VerticalAlign;\r\n        letterSpacing: number;\r\n        singleLine: boolean;\r\n        requestFocus(): void;\r\n        protected markSizeChanged(): void;\r\n        protected updateText(): void;\r\n        protected updateFont(): void;\r\n        protected updateFontColor(): void;\r\n        protected updateFontSize(): void;\r\n        protected updateOverflow(): void;\r\n        private onTextChanged;\r\n        private onTouchEnd1;\r\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GTree extends GList {\r\n        treeNodeRender: (node: GTreeNode, obj: GComponent) => void;\r\n        treeNodeWillExpand: (node: GTreeNode, expanded: boolean) => void;\r\n        private _indent;\r\n        private _clickToExpand;\r\n        private _rootNode;\r\n        private _expandedStatusInEvt;\r\n        private static helperIntList;\r\n        constructor();\r\n        readonly rootNode: GTreeNode;\r\n        indent: number;\r\n        clickToExpand: number;\r\n        getSelectedNode(): GTreeNode;\r\n        getSelectedNodes(result?: Array<GTreeNode>): Array<GTreeNode>;\r\n        selectNode(node: GTreeNode, scrollItToView?: boolean): void;\r\n        unselectNode(node: GTreeNode): void;\r\n        expandAll(folderNode?: GTreeNode): void;\r\n        collapseAll(folderNode?: GTreeNode): void;\r\n        private createCell;\r\n        _afterInserted(node: GTreeNode): void;\r\n        private getInsertIndexForNode;\r\n        _afterRemoved(node: GTreeNode): void;\r\n        _afterExpanded(node: GTreeNode): void;\r\n        _afterCollapsed(node: GTreeNode): void;\r\n        _afterMoved(node: GTreeNode): void;\r\n        private getFolderEndIndex;\r\n        private checkChildren;\r\n        private hideFolderNode;\r\n        private removeNode;\r\n        private __cellMouseDown;\r\n        private __expandedStateChanged;\r\n        protected dispatchItemEvent(item: GObject, evt: Event): void;\r\n        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;\r\n        protected readItems(buffer: ByteBuffer): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GTreeNode {\r\n        data: any;\r\n        private _parent;\r\n        private _children;\r\n        private _expanded;\r\n        private _level;\r\n        private _tree;\r\n        _cell: GComponent;\r\n        _resURL: string;\r\n        constructor(hasChild: boolean, resURL?: string);\r\n        expanded: boolean;\r\n        readonly isFolder: boolean;\r\n        readonly parent: GTreeNode;\r\n        text: string;\r\n        icon: string;\r\n        readonly cell: GComponent;\r\n        readonly level: number;\r\n        _setLevel(value: number): void;\r\n        addChild(child: GTreeNode): GTreeNode;\r\n        addChildAt(child: GTreeNode, index: number): GTreeNode;\r\n        removeChild(child: GTreeNode): GTreeNode;\r\n        removeChildAt(index: number): GTreeNode;\r\n        removeChildren(beginIndex?: number, endIndex?: number): void;\r\n        getChildAt(index: number): GTreeNode;\r\n        getChildIndex(child: GTreeNode): number;\r\n        getPrevSibling(): GTreeNode;\r\n        getNextSibling(): GTreeNode;\r\n        setChildIndex(child: GTreeNode, index: number): void;\r\n        swapChildren(child1: GTreeNode, child2: GTreeNode): void;\r\n        swapChildrenAt(index1: number, index2: number): void;\r\n        readonly numChildren: number;\r\n        expandToRoot(): void;\r\n        readonly tree: GTree;\r\n        _setTree(value: GTree): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    interface IUISource {\r\n        fileName: string;\r\n        loaded: boolean;\r\n        load(callback: Function, thisObj: any): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class Margin {\r\n        left: number;\r\n        right: number;\r\n        top: number;\r\n        bottom: number;\r\n        constructor();\r\n        copy(source: Margin): void;\r\n        isNone(): boolean;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class PackageItem {\r\n        owner: UIPackage;\r\n        type: PackageItemType;\r\n        objectType: ObjectType;\r\n        id: string;\r\n        name: string;\r\n        width: number;\r\n        height: number;\r\n        file: string;\r\n        decoded: boolean;\r\n        rawData: ByteBuffer;\r\n        asset: cc.Texture2D | cc.SpriteFrame | cc.AudioClip | cc.LabelAtlas;\r\n        highResolution: Array<string>;\r\n        branches: Array<string>;\r\n        scale9Grid: cc.Rect;\r\n        scaleByTile: boolean;\r\n        tileGridIndice: number;\r\n        smoothing: boolean;\r\n        hitTestData: PixelHitTestData;\r\n        interval: number;\r\n        repeatDelay: number;\r\n        swing: boolean;\r\n        frames: Array<Frame>;\r\n        extensionType: any;\r\n        constructor();\r\n        load(): any;\r\n        getBranch(): PackageItem;\r\n        getHighResolution(): PackageItem;\r\n        toString(): string;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class PopupMenu {\r\n        protected _contentPane: GComponent;\r\n        protected _list: GList;\r\n        constructor(url?: string);\r\n        dispose(): void;\r\n        addItem(caption: string, callback?: (item?: fgui.GObject, evt?: fgui.Event) => void): GButton;\r\n        addItemAt(caption: string, index: number, callback?: (item?: fgui.GObject, evt?: fgui.Event) => void): GButton;\r\n        addSeperator(): void;\r\n        getItemName(index: number): string;\r\n        setItemText(name: string, caption: string): void;\r\n        setItemVisible(name: string, visible: boolean): void;\r\n        setItemGrayed(name: string, grayed: boolean): void;\r\n        setItemCheckable(name: string, checkable: boolean): void;\r\n        setItemChecked(name: string, checked: boolean): void;\r\n        isItemChecked(name: string): boolean;\r\n        removeItem(name: string): boolean;\r\n        clearItems(): void;\r\n        readonly itemCount: number;\r\n        readonly contentPane: GComponent;\r\n        readonly list: GList;\r\n        show(target?: GObject, downward?: any): void;\r\n        private onClickItem;\r\n        private onClickItem2;\r\n        private onDisplay;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class RelationItem {\r\n        private _owner;\r\n        private _target;\r\n        private _defs;\r\n        private _targetX;\r\n        private _targetY;\r\n        private _targetWidth;\r\n        private _targetHeight;\r\n        constructor(owner: GObject);\r\n        readonly owner: GObject;\r\n        target: GObject;\r\n        add(relationType: number, usePercent?: boolean): void;\r\n        internalAdd(relationType: number, usePercent?: boolean): void;\r\n        remove(relationType: number): void;\r\n        copyFrom(source: RelationItem): void;\r\n        dispose(): void;\r\n        readonly isEmpty: boolean;\r\n        applyOnSelfResized(dWidth: number, dHeight: number, applyPivot: boolean): void;\r\n        private applyOnXYChanged;\r\n        private applyOnSizeChanged;\r\n        private addRefTarget;\r\n        private releaseRefTarget;\r\n        private __targetXYChanged;\r\n        private __targetSizeChanged;\r\n        private __targetSizeWillChange;\r\n    }\r\n    class RelationDef {\r\n        percent: boolean;\r\n        type: number;\r\n        axis: number;\r\n        constructor();\r\n        copyFrom(source: RelationDef): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class Relations {\r\n        private _owner;\r\n        private _items;\r\n        handling: GObject;\r\n        sizeDirty: boolean;\r\n        constructor(owner: GObject);\r\n        add(target: GObject, relationType: number, usePercent?: boolean): void;\r\n        remove(target: GObject, relationType?: number): void;\r\n        contains(target: GObject): boolean;\r\n        clearFor(target: GObject): void;\r\n        clearAll(): void;\r\n        copyFrom(source: Relations): void;\r\n        dispose(): void;\r\n        onOwnerSizeChanged(dWidth: number, dHeight: number, applyPivot: boolean): void;\r\n        ensureRelationsSizeCorrect(): void;\r\n        readonly empty: boolean;\r\n        setup(buffer: ByteBuffer, parentToChild: boolean): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class ScrollPane extends cc.Component {\r\n        private _owner;\r\n        private _container;\r\n        private _maskContainer;\r\n        private _scrollType;\r\n        private _scrollStep;\r\n        private _mouseWheelStep;\r\n        private _decelerationRate;\r\n        private _scrollBarMargin;\r\n        private _bouncebackEffect;\r\n        private _touchEffect;\r\n        private _scrollBarDisplayAuto;\r\n        private _vScrollNone;\r\n        private _hScrollNone;\r\n        private _needRefresh;\r\n        private _refreshBarAxis;\r\n        private _displayOnLeft;\r\n        private _snapToItem;\r\n        _displayInDemand: boolean;\r\n        private _mouseWheelEnabled;\r\n        private _pageMode;\r\n        private _inertiaDisabled;\r\n        private _floating;\r\n        private _xPos;\r\n        private _yPos;\r\n        private _viewSize;\r\n        private _contentSize;\r\n        private _overlapSize;\r\n        private _pageSize;\r\n        private _containerPos;\r\n        private _beginTouchPos;\r\n        private _lastTouchPos;\r\n        private _lastTouchGlobalPos;\r\n        private _velocity;\r\n        private _velocityScale;\r\n        private _lastMoveTime;\r\n        private _isHoldAreaDone;\r\n        private _aniFlag;\r\n        _loop: number;\r\n        private _headerLockedSize;\r\n        private _footerLockedSize;\r\n        private _refreshEventDispatching;\r\n        private _dragged;\r\n        private _hover;\r\n        private _tweening;\r\n        private _tweenTime;\r\n        private _tweenDuration;\r\n        private _tweenStart;\r\n        private _tweenChange;\r\n        private _pageController;\r\n        private _hzScrollBar;\r\n        private _vtScrollBar;\r\n        private _header;\r\n        private _footer;\r\n        static draggingPane: ScrollPane;\r\n        private static _gestureFlag;\r\n        static TWEEN_TIME_GO: number;\r\n        static TWEEN_TIME_DEFAULT: number;\r\n        static PULL_RATIO: number;\r\n        private static sHelperPoint;\r\n        private static sHelperRect;\r\n        private static sEndPos;\r\n        private static sOldChange;\r\n        setup(buffer: ByteBuffer): void;\r\n        protected onDestroy(): void;\r\n        hitTest(globalPt: cc.Vec2): GObject;\r\n        readonly owner: GComponent;\r\n        readonly hzScrollBar: GScrollBar;\r\n        readonly vtScrollBar: GScrollBar;\r\n        readonly header: GComponent;\r\n        readonly footer: GComponent;\r\n        bouncebackEffect: boolean;\r\n        touchEffect: boolean;\r\n        scrollStep: number;\r\n        decelerationRate: number;\r\n        snapToItem: boolean;\r\n        mouseWheelEnabled: boolean;\r\n        readonly isDragged: boolean;\r\n        percX: number;\r\n        setPercX(value: number, ani?: boolean): void;\r\n        percY: number;\r\n        setPercY(value: number, ani?: boolean): void;\r\n        posX: number;\r\n        setPosX(value: number, ani?: boolean): void;\r\n        posY: number;\r\n        setPosY(value: number, ani?: boolean): void;\r\n        readonly contentWidth: number;\r\n        readonly contentHeight: number;\r\n        viewWidth: number;\r\n        viewHeight: number;\r\n        currentPageX: number;\r\n        currentPageY: number;\r\n        setCurrentPageX(value: number, ani?: boolean): void;\r\n        setCurrentPageY(value: number, ani?: boolean): void;\r\n        readonly isBottomMost: boolean;\r\n        readonly isRightMost: boolean;\r\n        pageController: Controller;\r\n        readonly scrollingPosX: number;\r\n        readonly scrollingPosY: number;\r\n        scrollTop(ani?: boolean): void;\r\n        scrollBottom(ani?: boolean): void;\r\n        scrollUp(ratio?: number, ani?: boolean): void;\r\n        scrollDown(ratio?: number, ani?: boolean): void;\r\n        scrollLeft(ratio?: number, ani?: boolean): void;\r\n        scrollRight(ratio?: number, ani?: boolean): void;\r\n        scrollToView(target: any, ani?: boolean, setFirst?: boolean): void;\r\n        isChildInView(obj: GObject): boolean;\r\n        cancelDragging(): void;\r\n        lockHeader(size: number): void;\r\n        lockFooter(size: number): void;\r\n        onOwnerSizeChanged(): void;\r\n        handleControllerChanged(c: Controller): void;\r\n        private updatePageController;\r\n        adjustMaskContainer(): void;\r\n        setSize(aWidth: number, aHeight: number): void;\r\n        setContentSize(aWidth: number, aHeight: number): void;\r\n        changeContentSizeOnScrolling(deltaWidth: number, deltaHeight: number, deltaPosX: number, deltaPosY: number): void;\r\n        private handleSizeChanged;\r\n        private posChanged;\r\n        private refresh;\r\n        private refresh2;\r\n        private onTouchBegin;\r\n        private onTouchMove;\r\n        private onTouchEnd;\r\n        private onRollOver;\r\n        private onRollOut;\r\n        private onMouseWheel;\r\n        private updateScrollBarPos;\r\n        updateScrollBarVisible(): void;\r\n        private updateScrollBarVisible2;\r\n        private __barTweenComplete;\r\n        private getLoopPartSize;\r\n        private loopCheckingCurrent;\r\n        private loopCheckingTarget;\r\n        private loopCheckingTarget2;\r\n        private loopCheckingNewPos;\r\n        private alignPosition;\r\n        private alignByPage;\r\n        private updateTargetAndDuration;\r\n        private updateTargetAndDuration2;\r\n        private fixDuration;\r\n        private startTween;\r\n        private killTween;\r\n        private checkRefreshBar;\r\n        protected update(dt: number): boolean;\r\n        private runTween;\r\n        private static easeFunc;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class Transition {\r\n        name: string;\r\n        private _owner;\r\n        private _ownerBaseX;\r\n        private _ownerBaseY;\r\n        private _items;\r\n        private _totalTimes;\r\n        private _totalTasks;\r\n        private _playing;\r\n        private _paused;\r\n        private _onComplete;\r\n        private _options;\r\n        private _reversed;\r\n        private _totalDuration;\r\n        private _autoPlay;\r\n        private _autoPlayTimes;\r\n        private _autoPlayDelay;\r\n        private _timeScale;\r\n        private _startTime;\r\n        private _endTime;\r\n        static OPTION_IGNORE_DISPLAY_CONTROLLER: number;\r\n        static OPTION_AUTO_STOP_DISABLED: number;\r\n        static OPTION_AUTO_STOP_AT_END: number;\r\n        constructor(owner: GComponent);\r\n        play(onComplete?: () => void, times?: number, delay?: number, startTime?: number, endTime?: number): void;\r\n        playReverse(onComplete?: () => void, times?: number, delay?: number): void;\r\n        changePlayTimes(value: number): void;\r\n        setAutoPlay(value: boolean, times?: number, delay?: number): void;\r\n        private _play;\r\n        stop(setToComplete?: boolean, processCallback?: boolean): void;\r\n        private stopItem;\r\n        setPaused(paused: boolean): void;\r\n        dispose(): void;\r\n        readonly playing: boolean;\r\n        setValue(label: string, ...args: any[]): void;\r\n        setHook(label: string, callback: (label?: string) => void): void;\r\n        clearHooks(): void;\r\n        setTarget(label: string, newTarget: GObject): void;\r\n        setDuration(label: string, value: number): void;\r\n        getLabelTime(label: string): number;\r\n        timeScale: number;\r\n        updateFromRelations(targetId: string, dx: number, dy: number): void;\r\n        onEnable(): void;\r\n        onDisable(): void;\r\n        private onDelayedPlay;\r\n        private internalPlay;\r\n        private playItem;\r\n        private skipAnimations;\r\n        private onDelayedPlayItem;\r\n        private onTweenStart;\r\n        private onTweenUpdate;\r\n        private onTweenComplete;\r\n        private onPlayTransCompleted;\r\n        private callHook;\r\n        private checkAllComplete;\r\n        private applyValue;\r\n        setup(buffer: ByteBuffer): void;\r\n        private decodeValue;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class TranslationHelper {\r\n        static strings: Object;\r\n        static loadFromXML(source: string): void;\r\n        static translateComponent(item: PackageItem): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class UIConfig {\r\n        constructor();\r\n        static defaultFont: string;\r\n        static windowModalWaiting: string;\r\n        static globalModalWaiting: string;\r\n        static modalLayerColor: cc.Color;\r\n        static buttonSound: string;\r\n        static buttonSoundVolumeScale: number;\r\n        static horizontalScrollBar: string;\r\n        static verticalScrollBar: string;\r\n        static defaultScrollStep: number;\r\n        static defaultScrollDecelerationRate: number;\r\n        static defaultScrollBarDisplay: number;\r\n        static defaultScrollTouchEffect: boolean;\r\n        static defaultScrollBounceEffect: boolean;\r\n        static popupMenu: string;\r\n        static popupMenu_seperator: string;\r\n        static loaderErrorSign: string;\r\n        static tooltipsWin: string;\r\n        static defaultComboBoxVisibleItemCount: number;\r\n        static touchScrollSensitivity: number;\r\n        static touchDragSensitivity: number;\r\n        static clickDragSensitivity: number;\r\n        static bringWindowToFrontOnClick: boolean;\r\n        static frameTimeForAsyncUIConstruction: number;\r\n        static linkUnderline: boolean;\r\n        static defaultUIGroup: string;\r\n    }\r\n    var addLoadHandler: Function;\r\n    var registerFont: Function;\r\n    var getFontByName: Function;\r\n}\r\ndeclare namespace fgui {\r\n    class UIObjectFactory {\r\n        static counter: number;\r\n        static extensions: any;\r\n        private static loaderType;\r\n        constructor();\r\n        static setPackageItemExtension(url: string, type: any): void;\r\n        static setExtension(url: string, type: any): void;\r\n        static setLoaderExtension(type: any): void;\r\n        static resolveExtension(pi: PackageItem): void;\r\n        static newObject(pi: PackageItem, userClass?: any): GObject;\r\n        static newObject2(type: ObjectType): GObject;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class UIPackage {\r\n        private _id;\r\n        private _name;\r\n        private _items;\r\n        private _itemsById;\r\n        private _itemsByName;\r\n        private _url;\r\n        private _sprites;\r\n        private _dependencies;\r\n        private _branches;\r\n        _branchIndex: number;\r\n        static _constructing: number;\r\n        private static _instById;\r\n        private static _instByName;\r\n        private static _branch;\r\n        private static _vars;\r\n        constructor();\r\n        static branch: string;\r\n        static getVar(key: string): any;\r\n        static setVar(key: string, value: any): void;\r\n        static getById(id: string): UIPackage;\r\n        static getByName(name: string): UIPackage;\r\n        static addPackage(url: string): UIPackage;\r\n        static loadPackage(url: string, completeCallback: ((error: any) => void) | null): void;\r\n        static removePackage(packageIdOrName: string): void;\r\n        static createObject(pkgName: string, resName: string, userClass?: any): GObject;\r\n        static createObjectFromURL(url: string, userClass?: any): GObject;\r\n        static getItemURL(pkgName: string, resName: string): string;\r\n        static getItemByURL(url: string): PackageItem;\r\n        static normalizeURL(url: string): string;\r\n        static setStringsSource(source: string): void;\r\n        private loadPackage;\r\n        dispose(): void;\r\n        readonly id: string;\r\n        readonly name: string;\r\n        readonly url: string;\r\n        createObject(resName: string, userClass?: any): GObject;\r\n        internalCreateObject(item: PackageItem, userClass?: any): GObject;\r\n        getItemById(itemId: string): PackageItem;\r\n        getItemByName(resName: string): PackageItem;\r\n        getItemAssetByName(resName: string): any;\r\n        getItemAsset(item: PackageItem): cc.Asset;\r\n        loadAllAssets(): void;\r\n        private loadMovieClip;\r\n        private loadFont;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class Window extends GComponent {\r\n        private _contentPane;\r\n        private _modalWaitPane;\r\n        private _closeButton;\r\n        private _dragArea;\r\n        private _contentArea;\r\n        private _frame;\r\n        private _modal;\r\n        private _uiSources;\r\n        private _inited;\r\n        private _loading;\r\n        protected _requestingCmd: number;\r\n        bringToFontOnClick: boolean;\r\n        constructor();\r\n        addUISource(source: IUISource): void;\r\n        contentPane: GComponent;\r\n        readonly frame: GComponent;\r\n        closeButton: GObject;\r\n        dragArea: GObject;\r\n        contentArea: GObject;\r\n        show(): void;\r\n        showOn(root: GRoot): void;\r\n        hide(): void;\r\n        hideImmediately(): void;\r\n        centerOn(r: GRoot, restraint?: boolean): void;\r\n        toggleStatus(): void;\r\n        readonly isShowing: boolean;\r\n        readonly isTop: boolean;\r\n        modal: boolean;\r\n        bringToFront(): void;\r\n        showModalWait(requestingCmd?: number): void;\r\n        protected layoutModalWaitPane(): void;\r\n        closeModalWait(requestingCmd?: number): boolean;\r\n        readonly modalWaiting: boolean;\r\n        init(): void;\r\n        protected onInit(): void;\r\n        protected onShown(): void;\r\n        protected onHide(): void;\r\n        protected doShowAnimation(): void;\r\n        protected doHideAnimation(): void;\r\n        private __uiLoadComplete;\r\n        private _init;\r\n        dispose(): void;\r\n        protected closeEventHandler(evt: cc.Event): void;\r\n        protected onEnable(): void;\r\n        protected onDisable(): void;\r\n        private onTouchBegin_1;\r\n        private onDragStart_1;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class ControllerAction {\r\n        fromPage: string[];\r\n        toPage: string[];\r\n        static createAction(type: number): ControllerAction;\r\n        constructor();\r\n        run(controller: Controller, prevPage: string, curPage: string): void;\r\n        protected enter(controller: Controller): void;\r\n        protected leave(controller: Controller): void;\r\n        setup(buffer: ByteBuffer): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class ChangePageAction extends ControllerAction {\r\n        objectId: string;\r\n        controllerName: string;\r\n        targetPage: string;\r\n        constructor();\r\n        protected enter(controller: Controller): void;\r\n        setup(buffer: ByteBuffer): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class PlayTransitionAction extends ControllerAction {\r\n        transitionName: string;\r\n        playTimes: number;\r\n        delay: number;\r\n        stopOnExit: boolean;\r\n        private _currentTransition;\r\n        constructor();\r\n        protected enter(controller: Controller): void;\r\n        protected leave(controller: Controller): void;\r\n        setup(buffer: ByteBuffer): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    enum BlendMode {\r\n        Normal = 0,\r\n        None = 1,\r\n        Add = 2,\r\n        Multiply = 3,\r\n        Screen = 4,\r\n        Erase = 5,\r\n        Mask = 6,\r\n        Below = 7,\r\n        Off = 8,\r\n        Custom1 = 9,\r\n        Custom2 = 10,\r\n        Custom3 = 11\r\n    }\r\n    class BlendModeUtils {\r\n        private static factors;\r\n        static apply(node: cc.Node, blendMode: BlendMode): void;\r\n        static override(blendMode: BlendMode, srcFactor: number, dstFactor: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class Image extends cc.Sprite {\r\n        private _flip;\r\n        private _fillMethod;\r\n        private _fillOrigin;\r\n        private _fillAmount;\r\n        private _fillClockwise;\r\n        private _grayed;\r\n        private _graySpriteMaterial;\r\n        private _spriteMaterial;\r\n        constructor();\r\n        protected onLoad(): void;\r\n        flip: FlipType;\r\n        fillMethod: FillMethod;\r\n        fillOrigin: FillOrigin;\r\n        fillClockwise: boolean;\r\n        fillAmount: number;\r\n        private setupFill;\r\n        grayed: boolean;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class Frame {\r\n        rect: cc.Rect;\r\n        addDelay: number;\r\n        texture: cc.SpriteFrame;\r\n        constructor();\r\n    }\r\n    class MovieClip extends Image {\r\n        interval: number;\r\n        swing: boolean;\r\n        repeatDelay: number;\r\n        timeScale: number;\r\n        private _playing;\r\n        private _frameCount;\r\n        private _frames;\r\n        private _frame;\r\n        private _start;\r\n        private _end;\r\n        private _times;\r\n        private _endAt;\r\n        private _status;\r\n        private _callback;\r\n        private _callbackObj;\r\n        private _smoothing;\r\n        private _frameElapsed;\r\n        private _reversed;\r\n        private _repeatedCount;\r\n        constructor();\r\n        frames: Array<Frame>;\r\n        readonly frameCount: number;\r\n        frame: number;\r\n        playing: boolean;\r\n        smoothing: boolean;\r\n        rewind(): void;\r\n        syncStatus(anotherMc: MovieClip): void;\r\n        advance(timeInMiniseconds: number): void;\r\n        setPlaySettings(start?: number, end?: number, times?: number, endAt?: number, endCallback?: Function, callbackObj?: any): void;\r\n        protected update(dt: number): void;\r\n        private drawFrame;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class Event extends cc.Event {\r\n        static TOUCH_BEGIN: string;\r\n        static TOUCH_MOVE: string;\r\n        static TOUCH_END: string;\r\n        static CLICK: string;\r\n        static ROLL_OVER: string;\r\n        static ROLL_OUT: string;\r\n        static MOUSE_WHEEL: string;\r\n        static DISPLAY: string;\r\n        static UNDISPLAY: string;\r\n        static GEAR_STOP: string;\r\n        static LINK: string;\r\n        static Submit: string;\r\n        static TEXT_CHANGE: string;\r\n        static STATUS_CHANGED: string;\r\n        static XY_CHANGED: string;\r\n        static SIZE_CHANGED: string;\r\n        static SIZE_DELAY_CHANGE: string;\r\n        static DRAG_START: string;\r\n        static DRAG_MOVE: string;\r\n        static DRAG_END: string;\r\n        static DROP: string;\r\n        static SCROLL: string;\r\n        static SCROLL_END: string;\r\n        static PULL_DOWN_RELEASE: string;\r\n        static PULL_UP_RELEASE: string;\r\n        static CLICK_ITEM: string;\r\n        initiator: GObject;\r\n        pos: cc.Vec2;\r\n        touch: cc.Touch;\r\n        touchId: number;\r\n        clickCount: number;\r\n        button: number;\r\n        keyModifiers: number;\r\n        mouseWheelDelta: number;\r\n        _processor: InputProcessor;\r\n        constructor(type: string, bubbles: boolean);\r\n        readonly isShiftDown: boolean;\r\n        readonly isCtrlDown: boolean;\r\n        captureTouch(): void;\r\n        private static _eventPool;\r\n        static _borrow(type: string, bubbles?: boolean): Event;\r\n        static _return(evt: Event): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    interface IHitTest {\r\n        hitTest(obj: GComponent, x: number, y: number): boolean;\r\n    }\r\n    class PixelHitTest implements IHitTest {\r\n        private _data;\r\n        offsetX: number;\r\n        offsetY: number;\r\n        scaleX: number;\r\n        scaleY: number;\r\n        constructor(data: PixelHitTestData, offsetX?: number, offsetY?: number);\r\n        hitTest(obj: GComponent, x: number, y: number): boolean;\r\n    }\r\n    class PixelHitTestData {\r\n        pixelWidth: number;\r\n        scale: number;\r\n        pixels: Uint8Array;\r\n        constructor(ba: ByteBuffer);\r\n    }\r\n    class ChildHitArea implements IHitTest {\r\n        private _child;\r\n        private _reversed;\r\n        constructor(child: GObject, reversed?: boolean);\r\n        hitTest(obj: GComponent, x: number, y: number): boolean;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class InputProcessor extends cc.Component {\r\n        private _owner;\r\n        private _touchListener;\r\n        private _touchPos;\r\n        private _touches;\r\n        private _rollOutChain;\r\n        private _rollOverChain;\r\n        _captureCallback: (evt: Event) => void;\r\n        constructor();\r\n        onLoad(): void;\r\n        onEnable(): void;\r\n        onDisable(): void;\r\n        getAllTouches(touchIds?: Array<number>): Array<number>;\r\n        getTouchPosition(touchId?: number): cc.Vec2;\r\n        getTouchTarget(): GObject;\r\n        addTouchMonitor(touchId: number, target: GObject): void;\r\n        removeTouchMonitor(target: GObject): void;\r\n        cancelClick(touchId: number): void;\r\n        simulateClick(target: GObject): void;\r\n        private touchBeginHandler;\r\n        private touchMoveHandler;\r\n        private touchEndHandler;\r\n        private touchCancelHandler;\r\n        private mouseDownHandler;\r\n        private mouseUpHandler;\r\n        private mouseMoveHandler;\r\n        private mouseWheelHandler;\r\n        private updateInfo;\r\n        private getInfo;\r\n        private setBegin;\r\n        private setEnd;\r\n        private clickTest;\r\n        private handleRollOver;\r\n        private getEvent;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearBase {\r\n        static disableAllTweenEffect: boolean;\r\n        protected _owner: GObject;\r\n        protected _controller: Controller;\r\n        protected _tweenConfig: GearTweenConfig;\r\n        private static Classes;\r\n        static create(owner: GObject, index: number): GearBase;\r\n        constructor(owner: GObject);\r\n        dispose(): void;\r\n        controller: Controller;\r\n        readonly tweenConfig: GearTweenConfig;\r\n        setup(buffer: ByteBuffer): void;\r\n        updateFromRelations(dx: number, dy: number): void;\r\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\r\n        protected init(): void;\r\n        apply(): void;\r\n        updateState(): void;\r\n    }\r\n    class GearTweenConfig {\r\n        tween: boolean;\r\n        easeType: number;\r\n        duration: number;\r\n        delay: number;\r\n        _displayLockToken: number;\r\n        _tweener: GTweener;\r\n        constructor();\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearAnimation extends GearBase {\r\n        private _storage;\r\n        private _default;\r\n        constructor(owner: GObject);\r\n        protected init(): void;\r\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\r\n        apply(): void;\r\n        updateState(): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearColor extends GearBase {\r\n        private _storage;\r\n        private _default;\r\n        constructor(owner: GObject);\r\n        protected init(): void;\r\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\r\n        apply(): void;\r\n        updateState(): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearDisplay extends GearBase {\r\n        pages: string[];\r\n        private _visible;\r\n        private _displayLockToken;\r\n        constructor(owner: GObject);\r\n        protected init(): void;\r\n        apply(): void;\r\n        addLock(): number;\r\n        releaseLock(token: number): void;\r\n        readonly connected: boolean;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearDisplay2 extends GearBase {\r\n        pages: string[];\r\n        condition: number;\r\n        private _visible;\r\n        constructor(owner: GObject);\r\n        protected init(): void;\r\n        apply(): void;\r\n        evaluate(connected: boolean): boolean;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearFontSize extends GearBase {\r\n        private _storage;\r\n        private _default;\r\n        constructor(owner: GObject);\r\n        protected init(): void;\r\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\r\n        apply(): void;\r\n        updateState(): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearIcon extends GearBase {\r\n        private _storage;\r\n        private _default;\r\n        constructor(owner: GObject);\r\n        protected init(): void;\r\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\r\n        apply(): void;\r\n        updateState(): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearLook extends GearBase {\r\n        private _storage;\r\n        private _default;\r\n        constructor(owner: GObject);\r\n        protected init(): void;\r\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\r\n        apply(): void;\r\n        private __tweenUpdate;\r\n        private __tweenComplete;\r\n        updateState(): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearSize extends GearBase {\r\n        private _storage;\r\n        private _default;\r\n        constructor(owner: GObject);\r\n        protected init(): void;\r\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\r\n        apply(): void;\r\n        private __tweenUpdate;\r\n        private __tweenComplete;\r\n        updateState(): void;\r\n        updateFromRelations(dx: number, dy: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearText extends GearBase {\r\n        private _storage;\r\n        private _default;\r\n        constructor(owner: GObject);\r\n        protected init(): void;\r\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\r\n        apply(): void;\r\n        updateState(): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GearXY extends GearBase {\r\n        positionsInPercent: boolean;\r\n        private _storage;\r\n        private _default;\r\n        constructor(owner: GObject);\r\n        protected init(): void;\r\n        protected addStatus(pageId: string, buffer: ByteBuffer): void;\r\n        addExtStatus(pageId: string, buffer: ByteBuffer): void;\r\n        apply(): void;\r\n        private __tweenUpdate;\r\n        private __tweenComplete;\r\n        updateState(): void;\r\n        updateFromRelations(dx: number, dy: number): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class EaseManager {\r\n        private static _PiOver2;\r\n        private static _TwoPi;\r\n        static evaluate(easeType: number, time: number, duration: number, overshootOrAmplitude: number, period: number): number;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class EaseType {\r\n        static Linear: number;\r\n        static SineIn: number;\r\n        static SineOut: number;\r\n        static SineInOut: number;\r\n        static QuadIn: number;\r\n        static QuadOut: number;\r\n        static QuadInOut: number;\r\n        static CubicIn: number;\r\n        static CubicOut: number;\r\n        static CubicInOut: number;\r\n        static QuartIn: number;\r\n        static QuartOut: number;\r\n        static QuartInOut: number;\r\n        static QuintIn: number;\r\n        static QuintOut: number;\r\n        static QuintInOut: number;\r\n        static ExpoIn: number;\r\n        static ExpoOut: number;\r\n        static ExpoInOut: number;\r\n        static CircIn: number;\r\n        static CircOut: number;\r\n        static CircInOut: number;\r\n        static ElasticIn: number;\r\n        static ElasticOut: number;\r\n        static ElasticInOut: number;\r\n        static BackIn: number;\r\n        static BackOut: number;\r\n        static BackInOut: number;\r\n        static BounceIn: number;\r\n        static BounceOut: number;\r\n        static BounceInOut: number;\r\n        static Custom: number;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GPath {\r\n        private _segments;\r\n        private _points;\r\n        private _fullLength;\r\n        private static helperPoints;\r\n        constructor();\r\n        readonly length: number;\r\n        create2(pt1: GPathPoint, pt2: GPathPoint, pt3?: GPathPoint, pt4?: GPathPoint): void;\r\n        create(points: Array<GPathPoint>): void;\r\n        private createSplineSegment;\r\n        clear(): void;\r\n        getPointAt(t: number, result?: cc.Vec2): cc.Vec2;\r\n        readonly segmentCount: number;\r\n        getAnchorsInSegment(segmentIndex: number, points?: Array<cc.Vec2>): Array<cc.Vec2>;\r\n        getPointsInSegment(segmentIndex: number, t0: number, t1: number, points?: Array<cc.Vec2>, ts?: Array<number>, pointDensity?: number): Array<cc.Vec2>;\r\n        getAllPoints(points?: Array<cc.Vec2>, ts?: Array<number>, pointDensity?: number): Array<cc.Vec2>;\r\n        private onCRSplineCurve;\r\n        private onBezierCurve;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    enum CurveType {\r\n        CRSpline = 0,\r\n        Bezier = 1,\r\n        CubicBezier = 2,\r\n        Straight = 3\r\n    }\r\n    class GPathPoint {\r\n        x: number;\r\n        y: number;\r\n        control1_x: number;\r\n        control1_y: number;\r\n        control2_x: number;\r\n        control2_y: number;\r\n        curveType: number;\r\n        constructor();\r\n        static newPoint(x?: number, y?: number, curveType?: number): GPathPoint;\r\n        static newBezierPoint(x?: number, y?: number, control1_x?: number, control1_y?: number): GPathPoint;\r\n        static newCubicBezierPoint(x?: number, y?: number, control1_x?: number, control1_y?: number, control2_x?: number, control2_y?: number): GPathPoint;\r\n        clone(): GPathPoint;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GTween {\r\n        static catchCallbackExceptions: boolean;\r\n        static to(start: number, end: number, duration: number): GTweener;\r\n        static to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;\r\n        static to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;\r\n        static to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;\r\n        static toColor(start: number, end: number, duration: number): GTweener;\r\n        static delayedCall(delay: number): GTweener;\r\n        static shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;\r\n        static isTweening(target: Object, propType?: any): Boolean;\r\n        static kill(target: Object, complete?: boolean, propType?: any): void;\r\n        static getTween(target: Object, propType?: any): GTweener;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class GTweener {\r\n        _target: any;\r\n        _propType: any;\r\n        _node: cc.Node;\r\n        _killed: boolean;\r\n        _paused: boolean;\r\n        private _delay;\r\n        private _duration;\r\n        private _breakpoint;\r\n        private _easeType;\r\n        private _easeOvershootOrAmplitude;\r\n        private _easePeriod;\r\n        private _repeat;\r\n        private _yoyo;\r\n        private _timeScale;\r\n        private _snapping;\r\n        private _userData;\r\n        private _path;\r\n        private _onUpdate;\r\n        private _onStart;\r\n        private _onComplete;\r\n        private _onUpdateCaller;\r\n        private _onStartCaller;\r\n        private _onCompleteCaller;\r\n        private _startValue;\r\n        private _endValue;\r\n        private _value;\r\n        private _deltaValue;\r\n        private _valueSize;\r\n        private _started;\r\n        private _ended;\r\n        private _elapsedTime;\r\n        private _normalizedTime;\r\n        private static helperPoint;\r\n        constructor();\r\n        setDelay(value: number): GTweener;\r\n        readonly delay: number;\r\n        setDuration(value: number): GTweener;\r\n        readonly duration: number;\r\n        setBreakpoint(value: number): GTweener;\r\n        setEase(value: number): GTweener;\r\n        setEasePeriod(value: number): GTweener;\r\n        setEaseOvershootOrAmplitude(value: number): GTweener;\r\n        setRepeat(repeat: number, yoyo?: boolean): GTweener;\r\n        readonly repeat: number;\r\n        setTimeScale(value: number): GTweener;\r\n        setSnapping(value: boolean): GTweener;\r\n        setTarget(value: Object, propType?: Object): GTweener;\r\n        readonly target: Object;\r\n        setPath(value: GPath): GTweener;\r\n        setUserData(value: any): GTweener;\r\n        readonly userData: any;\r\n        onUpdate(callback: Function, caller: any): GTweener;\r\n        onStart(callback: Function, caller: any): GTweener;\r\n        onComplete(callback: Function, caller: any): GTweener;\r\n        readonly startValue: TweenValue;\r\n        readonly endValue: TweenValue;\r\n        readonly value: TweenValue;\r\n        readonly deltaValue: TweenValue;\r\n        readonly normalizedTime: number;\r\n        readonly completed: boolean;\r\n        readonly allCompleted: boolean;\r\n        setPaused(paused: boolean): GTweener;\r\n        seek(time: number): void;\r\n        kill(complete?: boolean): void;\r\n        _to(start: number, end: number, duration: number): GTweener;\r\n        _to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;\r\n        _to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;\r\n        _to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;\r\n        _toColor(start: number, end: number, duration: number): GTweener;\r\n        _shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;\r\n        _init(): void;\r\n        _reset(): void;\r\n        _update(dt: number): void;\r\n        private update;\r\n        private callStartCallback;\r\n        private callUpdateCallback;\r\n        private callCompleteCallback;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class TweenManager {\r\n        private static _activeTweens;\r\n        private static _tweenerPool;\r\n        private static _totalActiveTweens;\r\n        private static _root;\r\n        static createTween(): GTweener;\r\n        static isTweening(target: any, propType: any): boolean;\r\n        static killTweens(target: any, completed: boolean, propType: any): boolean;\r\n        static getTween(target: any, propType: any): GTweener;\r\n        private static update;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class TweenValue {\r\n        x: number;\r\n        y: number;\r\n        z: number;\r\n        w: number;\r\n        constructor();\r\n        color: number;\r\n        getField(index: number): number;\r\n        setField(index: number, value: number): void;\r\n        setZero(): void;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class ByteBuffer {\r\n        stringTable: Array<string>;\r\n        version: number;\r\n        littleEndian: boolean;\r\n        protected _view: DataView;\r\n        protected _bytes: Uint8Array;\r\n        protected _pos: number;\r\n        protected _length: number;\r\n        constructor(buffer: ArrayBuffer, offset?: number, length?: number);\r\n        readonly data: Uint8Array;\r\n        position: number;\r\n        skip(count: number): void;\r\n        private validate;\r\n        readByte(): number;\r\n        readUbyte(): number;\r\n        readBool(): boolean;\r\n        readShort(): number;\r\n        readUshort(): number;\r\n        readInt(): number;\r\n        readUint(): number;\r\n        readFloat(): number;\r\n        readString(len?: number): string;\r\n        readS(): string;\r\n        readSArray(cnt: number): Array<string>;\r\n        writeS(value: string): void;\r\n        readColor(hasAlpha?: boolean): cc.Color;\r\n        readChar(): string;\r\n        readBuffer(): ByteBuffer;\r\n        seek(indexTablePos: number, blockIndex: number): boolean;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class ColorMatrix {\r\n        matrix: Array<number>;\r\n        private static IDENTITY_MATRIX;\r\n        private static LENGTH;\r\n        private static LUMA_R;\r\n        private static LUMA_G;\r\n        private static LUMA_B;\r\n        static create(p_brightness: number, p_contrast: number, p_saturation: number, p_hue: number): ColorMatrix;\r\n        constructor();\r\n        reset(): void;\r\n        invert(): void;\r\n        adjustColor(p_brightness: number, p_contrast: number, p_saturation: number, p_hue: number): void;\r\n        adjustBrightness(p_val: number): void;\r\n        adjustContrast(p_val: number): void;\r\n        adjustSaturation(p_val: number): void;\r\n        adjustHue(p_val: number): void;\r\n        concat(p_matrix: Array<number>): void;\r\n        clone(): ColorMatrix;\r\n        protected copyMatrix(p_matrix: Array<number>): void;\r\n        protected multiplyMatrix(p_matrix: Array<number>): void;\r\n        protected cleanValue(p_val: number, p_limit: number): number;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class UBBParser {\r\n        private _text;\r\n        private _readPos;\r\n        protected _handlers: any;\r\n        lastColor: string;\r\n        lastSize: string;\r\n        linkUnderline: boolean;\r\n        linkColor: string;\r\n        static inst: UBBParser;\r\n        constructor();\r\n        protected onTag_URL(tagName: string, end: boolean, attr: string): string;\r\n        protected onTag_IMG(tagName: string, end: boolean, attr: string): string;\r\n        protected onTag_Simple(tagName: string, end: boolean, attr: string): string;\r\n        protected onTag_COLOR(tagName: string, end: boolean, attr: string): string;\r\n        protected onTag_FONT(tagName: string, end: boolean, attr: string): string;\r\n        protected onTag_SIZE(tagName: string, end: boolean, attr: string): string;\r\n        protected getTagText(remove?: boolean): string;\r\n        parse(text: string, remove?: boolean): string;\r\n    }\r\n}\r\ndeclare namespace fgui {\r\n    class ToolSet {\r\n        constructor();\r\n        static startsWith(source: string, str: string, ignoreCase?: boolean): boolean;\r\n        static encodeHTML(str: string): string;\r\n        static clamp(value: number, min: number, max: number): number;\r\n        static clamp01(value: number): number;\r\n        static lerp(start: number, end: number, percent: number): number;\r\n        static getTime(): number;\r\n        static toGrayed(c: cc.Color): cc.Color;\r\n        static repeat(t: number, length: number): number;\r\n        static distance(x1: number, y1: number, x2: number, y2: number): number;\r\n    }\r\n}\r\nimport fairygui = fgui;"
}