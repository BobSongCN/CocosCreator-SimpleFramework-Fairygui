{"version":3,"sources":["assets\\YK\\core\\task\\TaskList.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {Status, Task} from \"./Task\";\r\n\r\nexport enum ActionsExecutionMode {\r\n    RunInSequence,\r\n    RunInParallel\r\n}\r\n\r\nexport class TaskList extends Task {\r\n    public actions = new Array<Task>();\r\n    public finished = new Array<number>();\r\n    public executionMode = ActionsExecutionMode.RunInSequence;\r\n    private mCurIndex: number;\r\n\r\n    public get progress(): number {\r\n        let cur = 0;\r\n        for (let i = 0; i < this.actions.length; i++) {\r\n            cur += this.actions[i].progress;\r\n        }\r\n        return cur / this.actions.length;\r\n    }\r\n\r\n    protected onExecute() {\r\n        this.mCurIndex = 0;\r\n        this.finished.splice(0, this.finished.length);\r\n        this.mProgress = 0;\r\n    }\r\n\r\n    protected onUpdate() {\r\n        super.onUpdate();\r\n        if (this.actions.length == 0) {\r\n            this.endAction();\r\n            return;\r\n        }\r\n        switch (this.executionMode) {\r\n            case ActionsExecutionMode.RunInParallel:\r\n                this.checkParallelTask();\r\n                break;\r\n            case ActionsExecutionMode.RunInSequence:\r\n                this.checkInSequenceTask();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private checkParallelTask() {\r\n        for (let i = 0; i < this.actions.length; i++) {\r\n            if (this.finished.findIndex(a => a == i) != -1)\r\n                continue;\r\n            let status = this.actions[i].tick(this.mOwnerSystem);\r\n            if (status == Status.Failure) {\r\n                this.mErr = this.actions[i].errInfo;\r\n                this.endAction(false);\r\n                return;\r\n            }\r\n\r\n            if (status == Status.Success) this.finished.push(i);\r\n        }\r\n        if (this.finished.length == this.actions.length) this.endAction();\r\n    }\r\n\r\n    private checkInSequenceTask() {\r\n        for (let i = this.mCurIndex; i < this.actions.length; i++) {\r\n\r\n            let status = this.actions[i].tick(this.mOwnerSystem);\r\n\r\n            if (status == Status.Failure) {\r\n                this.endAction(false);\r\n                return;\r\n            }\r\n\r\n            if (status == Status.Running) {\r\n                this.mCurIndex = i;\r\n                return;\r\n            }\r\n        }\r\n        this.endAction();\r\n    }\r\n\r\n    protected onReset() {\r\n        for (let i = 0; i < this.actions.length; i++) {\r\n            this.actions[i].reset();\r\n        }\r\n\r\n        this.mCurIndex = 0;\r\n        this.finished.splice(0, this.finished.length);\r\n    }\r\n\r\n    public addTask(task: Task): TaskList {\r\n        this.actions.push(task);\r\n        return this;\r\n    }\r\n\r\n    constructor(executionMode: ActionsExecutionMode) {\r\n        super();\r\n        this.executionMode = executionMode;\r\n    }\r\n}"]}